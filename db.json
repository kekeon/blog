{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1522866367324},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1522866367325},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1522866367328},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1522866367330},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1522866367331},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1522866367332},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1522866367332},{"_id":"themes/yilia/_config.yml","hash":"d5e55fa1871c4fac8df30ab9fc3893c15d5ce469","modified":1523699875032},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1522866367366},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1522866367425},{"_id":"source/_posts/Ubuntu-server-rsync-配置.md","hash":"087eb5c529ba0878a4d3b5e8ccd9e9ec9028764c","modified":1525795685407},{"_id":"source/_posts/hello-hexo.md","hash":"f513bc28d9d2c123818e751538591dd55d14dca6","modified":1525794272802},{"_id":"source/_posts/前端面试题总结.md","hash":"6c80a2275fd43bd3cdf0385d094daae5134f8480","modified":1525795703063},{"_id":"source/notes/index.md","hash":"1decc26d3096b39f1b1b7d9010a171a8ea1d4f9f","modified":1525619940780},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1522866367299},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1522866367310},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1522866341601},{"_id":"themes/yilia/.git/index","hash":"53a91919030edb154e9e82ff720b3826e92dc7b9","modified":1522866367426},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1522866367292},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1522866367334},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1522866367335},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1522866367335},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1522866367336},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1522866367336},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1522866367337},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1522866367337},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1522866367362},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1522866367363},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1522866367362},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1522866367363},{"_id":"themes/yilia/layout/page.ejs","hash":"eac46a7dcfd791ac75583d567a794cec59d6cf4d","modified":1525618305836},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1522866367365},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1522866367365},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1522866367420},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1522866367424},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1522866367367},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1522866367412},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522866367359},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1522866367422},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1522866367423},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1522866341602},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1522866341603},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1522866341603},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1522866341604},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1522866341605},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1522866341613},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1522866341614},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1522866341615},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1522866341616},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1522866341617},{"_id":"themes/yilia/.git/logs/HEAD","hash":"6251917782ab75cc843d70971eefa21c44010bb2","modified":1522866367305},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1522866367338},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1522866367339},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1522866367340},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1522866367341},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1522866367344},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1522866367345},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1522866367346},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"27b2a2ceaeffdad11e31d0d433a76deb02c2c422","modified":1522902600236},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1522866367348},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1522866367348},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1522866367349},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1522866367349},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1522866367350},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1522866367351},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1522866367360},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1522866367361},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1522866367414},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1522866367416},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1522866367415},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1522866367413},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1522866367417},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1522866367417},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1522866367419},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1522866367418},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1522866367420},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1522866367368},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1522866367368},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1522866367369},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1522866367370},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1522866367370},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1522866367371},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1522866367372},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1522866367373},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1522866367373},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1522866367378},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1522866367383},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1522866367382},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1522866367383},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1522866367384},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1522866367387},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1522866367387},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1522866367388},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1522866367388},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1522866367389},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1522866367390},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1522866367390},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1522866367391},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1522866367392},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1522866367393},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1522866367396},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1522866367398},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1522866367398},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1522866367400},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1522866367400},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1522866367401},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1522866367402},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1522866367403},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1522866367404},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1522866367405},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1522866367406},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1522866367406},{"_id":"themes/yilia/source-src/js/slider.js","hash":"19ce9dfed31ddb86e96dcf3e8f8136c151226ee0","modified":1523683234948},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1522866367408},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1522866367411},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1522866367359},{"_id":"themes/yilia/.git/objects/pack/pack-a4a024724a50ae1e8ea0e0deab1aba91916d1344.idx","hash":"66fb8f29773daff89e17aceb7d91f5e53c6b8d47","modified":1522866367225},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1522866367302},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1522866367352},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1522866367353},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1522866367353},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1522866367354},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1522866367354},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1522866367355},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1522866367356},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1522866367357},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1522866367357},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1522866367358},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1522866367374},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1522866367375},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1522866367376},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1522866367376},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1522866367377},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1522866367379},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1522866367380},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1522866367381},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1522866367382},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1522866367385},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1522866367385},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1522866367386},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"6251917782ab75cc843d70971eefa21c44010bb2","modified":1522866367304},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1522866367299},{"_id":"source/images/1.jpg","hash":"a9d44be087ebe10e275d8b8ef99feb51f41e6f03","modified":1523680918096},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"6251917782ab75cc843d70971eefa21c44010bb2","modified":1522866367298},{"_id":"themes/yilia/.git/objects/pack/pack-a4a024724a50ae1e8ea0e0deab1aba91916d1344.pack","hash":"ad13c03f734dc6b2649043501fed63bd1714bfc3","modified":1522866367230},{"_id":"public/content.json","hash":"8ca7e39b81b771e08fdfd10ed17ae11da5ff4100","modified":1525795787811},{"_id":"public/notes/index.html","hash":"841717ff6f72832208e47843c9986435d52a09e7","modified":1525795789053},{"_id":"public/2018/ 05/ 08/ 前端面试题总结/index.html","hash":"9557cf688e5e6de73f88a1f08c6a246189b6c2b0","modified":1525795789053},{"_id":"public/2018/ 05/ 06/ Ubuntu-server-rsync-配置/index.html","hash":"655bdfa1199fef55656698e9d64ce314140e950b","modified":1525795789054},{"_id":"public/2018/ 04/ 30/ hello-hexo/index.html","hash":"476830e529500d1df2daf61a33d4e67368d92a4e","modified":1525795789055},{"_id":"public/archives/index.html","hash":"0767741cbca8df86cd4c93c447f8389ea1cf9125","modified":1525795789058},{"_id":"public/archives/2018/index.html","hash":"e4a9249f7f236f209c69575cdbf5a27157a24134","modified":1525795789063},{"_id":"public/archives/2018/04/index.html","hash":"29fe32a8e758e070c78ab05a67747ec5d08cbe4d","modified":1525795789065},{"_id":"public/archives/2018/05/index.html","hash":"c946f30359aa846cbe78b8474397f99908c829c5","modified":1525795789065},{"_id":"public/index.html","hash":"b69dd1b8d77c05f440ba83d7679cca8ef18cda2c","modified":1525795789066},{"_id":"public/tags/linux/index.html","hash":"eb7573554b1a113dabd0ae08e951d96213d19481","modified":1525795789066},{"_id":"public/tags/时间线/index.html","hash":"226a7438a731d8d9215a002d78e90db767cc4799","modified":1525795789067},{"_id":"public/tags/javaScript/index.html","hash":"d5b8638b7ff01c64836a5d737397b2a81bc33bfb","modified":1525795789067},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1525795789153},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1525795789154},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1525795789156},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1525795789156},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1525795789157},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1525795789157},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1525795789157},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1525795789161},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1525795789168},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1525795789283},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1525795789283},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1525795789283},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1525795789284},{"_id":"public/images/1.jpg","hash":"a9d44be087ebe10e275d8b8ef99feb51f41e6f03","modified":1525795790506}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-04-05T05:18:45.000Z","_content":" nihao","source":"notes/index.md","raw":"---\ntitle: tags\ndate: 2018-04-05 13:18:45\n---\n nihao","updated":"2018-05-06T15:19:00.780Z","path":"notes/index.html","comments":1,"layout":"page","_id":"cjgxveyf2000118tn7yfjlbol","content":"<p> nihao</p>\n","site":{"data":{}},"excerpt":"","more":"<p> nihao</p>\n"}],"Post":[{"layout":"posts","title":" Ubuntu server rsync 配置 ","date":"2018-05-06T15:25:28.000Z","_content":"\n### 安装\n\n在Ubuntu下安装rsync通过以步骤可以实现：\n\n\n```\nsudo apt-get install rsync xinetd\n```\n\n\n默认情况下Ubuntu安装了rsync，因此只需安装xinetd\n\n\n#### 服务器端配置\n1.编辑/etc/default/rsync 启动rsync作为使用xinetd的守护进程\n\n\n```\n打开rsync\nsudo vim /etc/default/rsync\n# 编辑rsync\nRSYNC_ENABLE=inetd\n```\n\n\n\n2.创建/etc/xinetd.d/rsync, 通过xinetd使rsync开始工作\n\n\n```\n\n\n# 创建并打开文件\nsudo vim /etc/xinetd.d/rsync\n# 编辑内容\nservice rsync\n{\n    disable         = no\n    socket_type     = stream\n    wait            = no\n    user            = root\n    server          = /usr/bin/rsync\n    server_args     = --daemon\n    log_on_failure  += USERID\n}\n```\n\n<!-- more -->\n3.创建/etc/rsyncd.conf,并填写配置信息\n\n\n```\n# 创建并打开文件\nsudo vim /etc/rsyncd.conf\n# 编辑配置信息\nmax connections = 2\nlog file = /var/log/rsync.log\ntimeout = 300\n\n[share] # 模块名\ncomment = Public Share\n# path为需要同步的文件夹路径\npath = /home/share\nread only = no\nlist = yes\nuid = root\ngid = root\n# 必须和 rsyncd.secrets中的用户名对应\nauth users = user\nsecrets file = /etc/rsyncd.secrets\n```\n\n4.创建/etc/rsyncd.secrets，配置用户名和密码.\n\n```\n# 创建并打开\nsudo vim /etc/rsyncd.secrets\n# 配置用户名和密码，密码可以任意设置\nuser:password\n\n```\n\n5.修改rsyncd.secrets文件的权限\n\n\n```\nsudo chmod 600 /etc/rsyncd.secrets\n```\n\n\n6.启动/重启 xinetd\n\n\n```\nsudo /etc/init.d/xinetd restart\n```\n\n#### 客户端配置\n由于我用的系统是windows，所以需要在windows上安装rsync的客户端cwRsync\n\n1.下载并安装cwRsync\n\n\n2.安装后将其添加到环境变量path中，我的cwRsync安装在D:\\cwRsync目录下，将D:\\cwRsync\\bin添加到环境变量path中\n\n#### 测试\n在客户端运行下面的命令检查，确认rsync配置成功\n\n\n```\n# user是在服务器中rsyncd.secrets文件中配置的用户名\n# xx.xx.xx.xx 是服务器的ip地址，也可以填写服务器对应的域名\n# share 是rsyncd.conf中定义的模块\n\n\nrsync user@xx.xx.xx.xx::share\n```\n\n输入密码后，如果输出以下类似内容，说明配置成功\n\ndrwxr-xr-x        4096 2006/12/13 09:41:59 .\ndrwxr-xr-x        4096 2006/11/23 18:00:03 folders\n#### 同步\n> 1.将本地文件同步至服务器\n\n 将当前目录下public路径下的全部内容，同步至服务器，服务器的同步路径在rsyncd.conf中指定\n\n```\nrsync -av ./public/ user@xx.xx.xx.xx::share\n```\n\n> 2.将服务器文件同步至本地\n\n\n```\nrsync -cvazu --progress user@xx.xx.xx.xx::share /rsyn\n```\n\n","source":"_posts/Ubuntu-server-rsync-配置.md","raw":"---\nlayout: posts\ntitle: ' Ubuntu server rsync 配置 '\ndate: 2018-05-06 23:25:28\ntags: 'linux'\n---\n\n### 安装\n\n在Ubuntu下安装rsync通过以步骤可以实现：\n\n\n```\nsudo apt-get install rsync xinetd\n```\n\n\n默认情况下Ubuntu安装了rsync，因此只需安装xinetd\n\n\n#### 服务器端配置\n1.编辑/etc/default/rsync 启动rsync作为使用xinetd的守护进程\n\n\n```\n打开rsync\nsudo vim /etc/default/rsync\n# 编辑rsync\nRSYNC_ENABLE=inetd\n```\n\n\n\n2.创建/etc/xinetd.d/rsync, 通过xinetd使rsync开始工作\n\n\n```\n\n\n# 创建并打开文件\nsudo vim /etc/xinetd.d/rsync\n# 编辑内容\nservice rsync\n{\n    disable         = no\n    socket_type     = stream\n    wait            = no\n    user            = root\n    server          = /usr/bin/rsync\n    server_args     = --daemon\n    log_on_failure  += USERID\n}\n```\n\n<!-- more -->\n3.创建/etc/rsyncd.conf,并填写配置信息\n\n\n```\n# 创建并打开文件\nsudo vim /etc/rsyncd.conf\n# 编辑配置信息\nmax connections = 2\nlog file = /var/log/rsync.log\ntimeout = 300\n\n[share] # 模块名\ncomment = Public Share\n# path为需要同步的文件夹路径\npath = /home/share\nread only = no\nlist = yes\nuid = root\ngid = root\n# 必须和 rsyncd.secrets中的用户名对应\nauth users = user\nsecrets file = /etc/rsyncd.secrets\n```\n\n4.创建/etc/rsyncd.secrets，配置用户名和密码.\n\n```\n# 创建并打开\nsudo vim /etc/rsyncd.secrets\n# 配置用户名和密码，密码可以任意设置\nuser:password\n\n```\n\n5.修改rsyncd.secrets文件的权限\n\n\n```\nsudo chmod 600 /etc/rsyncd.secrets\n```\n\n\n6.启动/重启 xinetd\n\n\n```\nsudo /etc/init.d/xinetd restart\n```\n\n#### 客户端配置\n由于我用的系统是windows，所以需要在windows上安装rsync的客户端cwRsync\n\n1.下载并安装cwRsync\n\n\n2.安装后将其添加到环境变量path中，我的cwRsync安装在D:\\cwRsync目录下，将D:\\cwRsync\\bin添加到环境变量path中\n\n#### 测试\n在客户端运行下面的命令检查，确认rsync配置成功\n\n\n```\n# user是在服务器中rsyncd.secrets文件中配置的用户名\n# xx.xx.xx.xx 是服务器的ip地址，也可以填写服务器对应的域名\n# share 是rsyncd.conf中定义的模块\n\n\nrsync user@xx.xx.xx.xx::share\n```\n\n输入密码后，如果输出以下类似内容，说明配置成功\n\ndrwxr-xr-x        4096 2006/12/13 09:41:59 .\ndrwxr-xr-x        4096 2006/11/23 18:00:03 folders\n#### 同步\n> 1.将本地文件同步至服务器\n\n 将当前目录下public路径下的全部内容，同步至服务器，服务器的同步路径在rsyncd.conf中指定\n\n```\nrsync -av ./public/ user@xx.xx.xx.xx::share\n```\n\n> 2.将服务器文件同步至本地\n\n\n```\nrsync -cvazu --progress user@xx.xx.xx.xx::share /rsyn\n```\n\n","slug":"Ubuntu-server-rsync-配置","published":1,"updated":"2018-05-08T16:08:05.407Z","comments":1,"photos":[],"link":"","_id":"cjgxveye7000018tnmaq9rie9","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在Ubuntu下安装rsync通过以步骤可以实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install rsync xinetd</span><br></pre></td></tr></table></figure>\n<p>默认情况下Ubuntu安装了rsync，因此只需安装xinetd</p>\n<h4 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h4><p>1.编辑/etc/default/rsync 启动rsync作为使用xinetd的守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开rsync</span><br><span class=\"line\">sudo vim /etc/default/rsync</span><br><span class=\"line\"># 编辑rsync</span><br><span class=\"line\">RSYNC_ENABLE=inetd</span><br></pre></td></tr></table></figure>\n<p>2.创建/etc/xinetd.d/rsync, 通过xinetd使rsync开始工作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 创建并打开文件</span><br><span class=\"line\">sudo vim /etc/xinetd.d/rsync</span><br><span class=\"line\"># 编辑内容</span><br><span class=\"line\">service rsync</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    disable         = no</span><br><span class=\"line\">    socket_type     = stream</span><br><span class=\"line\">    wait            = no</span><br><span class=\"line\">    user            = root</span><br><span class=\"line\">    server          = /usr/bin/rsync</span><br><span class=\"line\">    server_args     = --daemon</span><br><span class=\"line\">    log_on_failure  += USERID</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>3.创建/etc/rsyncd.conf,并填写配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建并打开文件</span><br><span class=\"line\">sudo vim /etc/rsyncd.conf</span><br><span class=\"line\"># 编辑配置信息</span><br><span class=\"line\">max connections = 2</span><br><span class=\"line\">log file = /var/log/rsync.log</span><br><span class=\"line\">timeout = 300</span><br><span class=\"line\"></span><br><span class=\"line\">[share] # 模块名</span><br><span class=\"line\">comment = Public Share</span><br><span class=\"line\"># path为需要同步的文件夹路径</span><br><span class=\"line\">path = /home/share</span><br><span class=\"line\">read only = no</span><br><span class=\"line\">list = yes</span><br><span class=\"line\">uid = root</span><br><span class=\"line\">gid = root</span><br><span class=\"line\"># 必须和 rsyncd.secrets中的用户名对应</span><br><span class=\"line\">auth users = user</span><br><span class=\"line\">secrets file = /etc/rsyncd.secrets</span><br></pre></td></tr></table></figure>\n<p>4.创建/etc/rsyncd.secrets，配置用户名和密码.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建并打开</span><br><span class=\"line\">sudo vim /etc/rsyncd.secrets</span><br><span class=\"line\"># 配置用户名和密码，密码可以任意设置</span><br><span class=\"line\">user:password</span><br></pre></td></tr></table></figure>\n<p>5.修改rsyncd.secrets文件的权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 600 /etc/rsyncd.secrets</span><br></pre></td></tr></table></figure>\n<p>6.启动/重启 xinetd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/xinetd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h4><p>由于我用的系统是windows，所以需要在windows上安装rsync的客户端cwRsync</p>\n<p>1.下载并安装cwRsync</p>\n<p>2.安装后将其添加到环境变量path中，我的cwRsync安装在D:\\cwRsync目录下，将D:\\cwRsync\\bin添加到环境变量path中</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>在客户端运行下面的命令检查，确认rsync配置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># user是在服务器中rsyncd.secrets文件中配置的用户名</span><br><span class=\"line\"># xx.xx.xx.xx 是服务器的ip地址，也可以填写服务器对应的域名</span><br><span class=\"line\"># share 是rsyncd.conf中定义的模块</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rsync user@xx.xx.xx.xx::share</span><br></pre></td></tr></table></figure>\n<p>输入密码后，如果输出以下类似内容，说明配置成功</p>\n<p>drwxr-xr-x        4096 2006/12/13 09:41:59 .<br>drwxr-xr-x        4096 2006/11/23 18:00:03 folders</p>\n<h4 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h4><blockquote>\n<p>1.将本地文件同步至服务器</p>\n</blockquote>\n<p> 将当前目录下public路径下的全部内容，同步至服务器，服务器的同步路径在rsyncd.conf中指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -av ./public/ user@xx.xx.xx.xx::share</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.将服务器文件同步至本地</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -cvazu --progress user@xx.xx.xx.xx::share /rsyn</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在Ubuntu下安装rsync通过以步骤可以实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install rsync xinetd</span><br></pre></td></tr></table></figure>\n<p>默认情况下Ubuntu安装了rsync，因此只需安装xinetd</p>\n<h4 id=\"服务器端配置\"><a href=\"#服务器端配置\" class=\"headerlink\" title=\"服务器端配置\"></a>服务器端配置</h4><p>1.编辑/etc/default/rsync 启动rsync作为使用xinetd的守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开rsync</span><br><span class=\"line\">sudo vim /etc/default/rsync</span><br><span class=\"line\"># 编辑rsync</span><br><span class=\"line\">RSYNC_ENABLE=inetd</span><br></pre></td></tr></table></figure>\n<p>2.创建/etc/xinetd.d/rsync, 通过xinetd使rsync开始工作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 创建并打开文件</span><br><span class=\"line\">sudo vim /etc/xinetd.d/rsync</span><br><span class=\"line\"># 编辑内容</span><br><span class=\"line\">service rsync</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    disable         = no</span><br><span class=\"line\">    socket_type     = stream</span><br><span class=\"line\">    wait            = no</span><br><span class=\"line\">    user            = root</span><br><span class=\"line\">    server          = /usr/bin/rsync</span><br><span class=\"line\">    server_args     = --daemon</span><br><span class=\"line\">    log_on_failure  += USERID</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>3.创建/etc/rsyncd.conf,并填写配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建并打开文件</span><br><span class=\"line\">sudo vim /etc/rsyncd.conf</span><br><span class=\"line\"># 编辑配置信息</span><br><span class=\"line\">max connections = 2</span><br><span class=\"line\">log file = /var/log/rsync.log</span><br><span class=\"line\">timeout = 300</span><br><span class=\"line\"></span><br><span class=\"line\">[share] # 模块名</span><br><span class=\"line\">comment = Public Share</span><br><span class=\"line\"># path为需要同步的文件夹路径</span><br><span class=\"line\">path = /home/share</span><br><span class=\"line\">read only = no</span><br><span class=\"line\">list = yes</span><br><span class=\"line\">uid = root</span><br><span class=\"line\">gid = root</span><br><span class=\"line\"># 必须和 rsyncd.secrets中的用户名对应</span><br><span class=\"line\">auth users = user</span><br><span class=\"line\">secrets file = /etc/rsyncd.secrets</span><br></pre></td></tr></table></figure>\n<p>4.创建/etc/rsyncd.secrets，配置用户名和密码.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建并打开</span><br><span class=\"line\">sudo vim /etc/rsyncd.secrets</span><br><span class=\"line\"># 配置用户名和密码，密码可以任意设置</span><br><span class=\"line\">user:password</span><br></pre></td></tr></table></figure>\n<p>5.修改rsyncd.secrets文件的权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 600 /etc/rsyncd.secrets</span><br></pre></td></tr></table></figure>\n<p>6.启动/重启 xinetd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/xinetd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h4><p>由于我用的系统是windows，所以需要在windows上安装rsync的客户端cwRsync</p>\n<p>1.下载并安装cwRsync</p>\n<p>2.安装后将其添加到环境变量path中，我的cwRsync安装在D:\\cwRsync目录下，将D:\\cwRsync\\bin添加到环境变量path中</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>在客户端运行下面的命令检查，确认rsync配置成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># user是在服务器中rsyncd.secrets文件中配置的用户名</span><br><span class=\"line\"># xx.xx.xx.xx 是服务器的ip地址，也可以填写服务器对应的域名</span><br><span class=\"line\"># share 是rsyncd.conf中定义的模块</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rsync user@xx.xx.xx.xx::share</span><br></pre></td></tr></table></figure>\n<p>输入密码后，如果输出以下类似内容，说明配置成功</p>\n<p>drwxr-xr-x        4096 2006/12/13 09:41:59 .<br>drwxr-xr-x        4096 2006/11/23 18:00:03 folders</p>\n<h4 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h4><blockquote>\n<p>1.将本地文件同步至服务器</p>\n</blockquote>\n<p> 将当前目录下public路径下的全部内容，同步至服务器，服务器的同步路径在rsyncd.conf中指定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -av ./public/ user@xx.xx.xx.xx::share</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.将服务器文件同步至本地</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -cvazu --progress user@xx.xx.xx.xx::share /rsyn</span><br></pre></td></tr></table></figure>"},{"layout":"posts","title":"hello_hexo","date":"2018-04-30T15:35:07.000Z","_content":"\n hexo 的初始学习，用于平时的工作总结和学习总结，分享一些有趣的东西\n","source":"_posts/hello-hexo.md","raw":"---\nlayout: posts\ntitle: hello_hexo\ndate: 2018-04-30 23:35:07\ntags: \"时间线\"\n---\n\n hexo 的初始学习，用于平时的工作总结和学习总结，分享一些有趣的东西\n","slug":"hello-hexo","published":1,"updated":"2018-05-08T15:44:32.802Z","comments":1,"photos":[],"link":"","_id":"cjgxveyg0000218tnddly6t8i","content":"<p> hexo 的初始学习，用于平时的工作总结和学习总结，分享一些有趣的东西</p>\n","site":{"data":{}},"excerpt":"","more":"<p> hexo 的初始学习，用于平时的工作总结和学习总结，分享一些有趣的东西</p>\n"},{"layout":"posts","title":"前端面试题总结","date":"2018-05-08T15:22:48.000Z","_content":"\n###  面试题总结\n\n---\n###### 1.http 网站请求得整个过程\n\n```\n1.域名解析\n```\n\n就是将网站名称转变成IP地址：localhost-->127.0.0.1，像什么hosts文件，DNS域名解析等等可以实现这种功能\n\n```\n2. 发起TCP的3次握手\n```\n\n在客户机和服务器之间建立正常的TCP网络连接时：\n\t\t客户机首先发出一个SYN消息，\n\t\t服务器使用SYN+ACK应答表示接收到了这个消息，\n\t\t最后客户机再以ACK消息响应。\n\t这样在客户机和服务器之间才能建立起\n\n<!-- more -->\n可靠的TCP连接，数据才可以在客户机和服务器之间传递。\n```\n3. 建立TCP连接后发起http请求\n```\n\n发起HTTP请求(HTTP Request)\n所谓的HTTP请求，也就是Web客户端向Web服务器发送信息，这个信息由如下三部分组成：\n请求头，请求行，请求方式(只在POST请求中存在，因为GET请求并不包含任何实体)\n\n```\n4. 服务器端响应http请求\n```\n浏览器得到html代码\n\n```\n5. 浏览器解析html代码，\n```\n并请求html代码中的资源\n了解持久连接\n有时候我们获取一个HTML页面，在对浏览器对HTML解析的过程中，如果发现额外的URL需要获取的内容，会再次发起HTTP请求去服务器获取，比如样式文件，图片。许多个HTTP请求，只依靠一个TCP连接就够了，这就是所谓的持久连接。也是所谓的一次HTTP请求完成\n```\n。\n6. 浏览器对页面进行渲染呈现给用户\n```\n\n###### 2.webpack glup 得去别，AMD、CMD得区别\nsea.js遵循CMD规范.书写方式类似node.js的书写模板代码.依赖的自动加载,配置的简洁清晰.说白了就是懒加载.\n\nrequire.js遵循AMD规范,CMD和AMD基本相同,最大的区别是就CMD是懒加载,AMD是预加载.\n\n简单来说,就是sea.js属于懒加载,require.js属于预加载.\n\n在这里,顺便扩展一下预加载和懒加载的优缺点\n\n预加载:当第一次访问时将所有的文件加载出来\n优点:第一次访问完成以后, 再次访问的速度会很快\n缺点:第一次加载页面要等待很久.\n\n懒加载:使用的时候才会加载对应的文件.\n优点:第一次访问速度相对快点\n缺点:再访问其他新的模块时速度会变慢.\n\ngulp是一个基于流的构建工具，相对其他构件工具来说，更简洁更高效。\nwebpack是模块化管理的工具，使用webpack可实现模块按需加载，模块预处理，模块打包等功能\nhttps://www.jianshu.com/p/9724c47b406c\n\nwebpack 模块化打包原理：\nhttp://blog.csdn.net/u014168594/article/details/77198729）\n\n  1. 一切皆模块：\n正如js文件可以是一个“模块（module）”一样，其他的（如css、image或html）文件也可视作模 块。因此，你可以require(‘myJSfile.js’)亦可以require(‘myCSSfile.css’)。这意味着我们可以将事物（业务）分割成更小的易于管理的片段，从而达到重复利用等的目的。\n  2. 按需加载：\n传统的模块打包工具（module bundlers）最终将所有的模块编译生成一个庞大的bundle.js文件。但是在真实的app里边，“bundle.js”文件可能有10M到15M之大可能会导致应用一直处于加载中状态。因此Webpack使用许多特性来分割代码然后生成多个“bundle”文件，而且异步加载部分代码以实现按需加载。\n\n```\n3.require.js  得使用\n```\n\n\nhttp://www.ruanyifeng.com/blog/2012/11/require_js.html?bsh_bid=230697246\n\n\n```\n4.简单介绍一下webpack，及loader中得作用。\n```\n\n  ● css-loader 处理css中路径引用等问题\n  ● style-loader 动态把样式写入css\n  ● sass-loader scss编译器\n  ● less-loader less编译器\n  ● postcss-loader scss再处理\n\n\n```\n\n<!-- more -->\n5.webpack 简单配置描述：\n```\n https://www.cnblogs.com/pingfan1990/archive/2017/05/21/6886633.html\n\n```\n6.当webpack得打包文件过大时怎么进行优化\n```\n\n(1)webpack+react的项目打包出来的文件经常动则几百kb甚至上兆，究其原因有：\n  ● import css文件的时候，会直接作为模块一并打包到js文件中\n  ● 所有js模块 + 依赖都会打包到一个文件\n  ● React、ReactDOM文件过大\n\n针对第一种情况，我们可以使用\n\n\nextract-text-webpack-plugin，但缺点是会产生更长时间的编译，也没有HMR，还会增加额外的HTTP请求。对于css文件不是很大的情况最好还是不要使用该插件。\n针对第二种情况，我们可以通过提取公共代码块，这也是比较普遍的做法：\n\n(2).代码压缩 webpack提供的UglifyJS插件由于采用单线程压缩\n\n(3).happypack同时还利用缓存来使得rebuild 更快\n\n(4).alias和noPase resolve.alias是webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径\nhttps://github.com/hawx1993/tech-blog/issues/3\n\n\n###### 3.开发过程中遇到得兼容性问题，css . js 兼容\nhtml兼容：\n\n```\n1.IE\n```\n 条件注释---IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效\n\n\n```\n2.html\n```\n 新标签IE不支持--IE8/IE7/IE6支持通过document.createElement方法产生的标签\n\n\n```\n3.css:兼容\n```\n\nIe z-index问题 给父级添加position:relative\ncss hack原理及常用hack\n  ● 原理：利用不同浏览器对CSS的支持和解析结果不一样编写针对特定浏览器样式。\n\n  ● 常见的hack有\n\n     ○ 属性hack\n    ○ 选择器hack\n    ○ IE条件注释\n\n```\n4.js兼容\n```\n\n> 1.IE和标准下有哪些兼容性的写法\n>\n> Var ev = ev || window.event\n>\n> document.documentElement.clientWidth || document.body.clientWidth\n>\n> Var target = ev.srcElement||ev.target\n>\n> 2.标准的事件绑定方法函数为addEventListener，但IE下是attachEvent；\n> 3.事件的捕获方式不一致，标准浏览器是由外至内，而IE是由内到外，但是最后的结果是将IE的标准定为标准\n>\n> 4.window.event获取的。并且获取目标元素的方法也不同，标准浏览器是event.target，而IE下是event.srcElement\n\n\n###### 4.原型链，原型\n  ● 原型：\n\n\n> 1. JavaScript的所有对象中都包含了一个 [proto] 内部属性，这个属性所对应的就是该对象的原型\n>\n> 2.JavaScript的函数对象，除了原型 [proto] 之外，还预置了 prototype 属性\n>\n> 3. 当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型 [proto]。\n\n  ● 原型链：\n\n> 1. 当一个对象调用的属性/方法自身不存在时，就会去自己 [proto] 关联的前辈 prototype 对象上去找\n>\n> 2.如果没找到，就会去该 prototype 原型 [proto] 关联的前辈 prototype 去找。依次类推，直到找到属性/方法或 undefined 为止。从而形成了所谓的“原型链”\n\n  ● 原型特点：\n\n> JavaScript对象是通过引用来传递的，当修改原型时，与之相关的对象也会继承这一改变\n\n###### 5.rem 得计算方式。\n> 设计图750px,iphone 6 得屏幕宽度为375px,  之前设计图为640px\n>\n>   ● 假设拿到的设计稿和上述网易的一样都是750，Flexible会把设计稿分为10份，可以理解为页面width=10rem，即1rem=75px，所以根font-size（基准值）=75px。\n>\n> 之后的css换算rem公式为：\n>\n> px/75=rem,所以100px=100/75=1.33rem,50px=50/75=0.66rem\n> 9.闭包怎么理解，及使用场景。\n\n###### 6.简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\n> 使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值\n>\n>   ● 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域\n\n>   ● 闭包的特性：\n\n>    函数内再嵌套函数\\\n>    内部函数可以引用外层的参数和变量\\\n>     参数和变量不会被垃圾回收机制回收\n\n###### 7.css 选择器及权重问题\n\n>   ● id选择器（ # myid）\\\n>   ● 类选择器（.myclassname）\\\n>   ● 标签选择器（div, h1, p）\\\n>   ● 相邻选择器（h1 + p）\\\n>   ● 子选择器（ul > li）\\\n>   ● 后代选择器（li a）\\\n>   ● 通配符选择器（ * ）\\\n>   ● 属性选择器（a[rel = \"external\"]）\\\n>   ● 伪类选择器（a:hover, li:nth-child）\\\n>   ● 可继承的样式： font-size font-family color, UL LI DL DD DT\\\n>   ● 不可继承的样式：border padding margin width height\\\n> CSS优先级算法如何计算？\n>   ● 优先级就近原则，同权重情况下样式定义最近者为准\\\n>   ● 载入样式以最后载入的定位为准\\\n>   ● 优先级为: !important > id > class > tag \\\n> important 比内联优先级高\n\n###### 8.同源策略\n> 请解释一下 JavaScript 的同源策略\\\n>   ● 概念:同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape\\ Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议\\\n>   ● 指一段脚本只能读取来自同一来源的窗口和文档的属性\\\n> 为什么要有同源限制？\\\n>   ● 我们举例说明：比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手了。\\\n>   ● 缺点\\\n>       现在网站的JS都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节\n\n\n###### 9.跨域的几种方式，jsonp的实现原理\n\n1、 通过jsonp跨域\\\n2、 document.domain + iframe跨域\\\n3、 location.hash + iframe\n4、 window.name + iframe跨域\\\n5、 postMessage跨域\\\n6、 跨域资源共享（CORS）\\\n7、 nginx代理跨域\\\n8、 nodejs中间件代理跨域\\\n9、 WebSocket协议跨域\\\n\njsonp:\\\nJsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术\n\ndocument.domain\\\n目前，很多大型网站都会使用多个子域名，而浏览器的同源策略对于它们来说就有点过于严格了。如，来自www.a.com想要获取document.a.com中的数据。只要基础域名相同，便可以通过修改document.domain为基础域名的方式来进行通信，但是需要注意的是协议和端口也必须相同。\n\n所谓反向代理服务器，它是代理服务器中的一种。客户端直接发送请求给代理服务器，然后代理服务器会根据客户端的请求，从真实的资源服务器中获取资源返回给客户端。所以反向代理就隐藏了真实的服务器。利用这种特性，我们可以通过将其他域名的资源映射成自己的域名来规避开跨域问题\n\n利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。\n\n###### 10.webpack反向代理实现方式\nwebpack-dev-server配置跨域方案\\\n如果你项目是用webpack作为前端自动化构建工具的话，那么可以引用webpack-dev-server来进行配置跨域方案。webpack-dev-server是一个小型的nodejs服务器，是基于express框架的，用于实时监听和打包编译静态资源。其中里面有一个属性是proxy，是专门来配置代理请求接口的。\n\n###### 11. mongoDB特性及应用场景，与mysql得不同点\nhttps://yq.aliyun.com/articles/64352?spm=5176.8091938.0.0.oAHbxp\\\n开源的NoSQL数据库,用于存储非结构化数据,\n    SQL中的绝大多数操作有对应的方式来实现,\n    采用BSON描述数据类型\n\n用在应用服务器的日志记录，查找起来比文本灵活，导出也很方便。也是给应用练手，从外围系统开始使用MongoDB。 用在一些第三方信息的获取或者抓取，因为MongoDB的schema-less，所有格式灵活，不用为了各种格式不一样的信息专门设计统一的格式，极大的减少开发的工作。\nmongodb之前有用过，主要用来存储一些监控数据，No schema 对开发人员来说，真的很方便，增加字段不用改表结构，而且学习成本极低。\n\n###### 12.es6新增特性\n现在如果你还不知道es6的新特性的话，可能真的就很难找到工作了\n\n###### 13.promise的用法\n\n\n```\ngetJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n```\n\n\nPromise.prototype.finally()\\\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\nPromise.all() \\\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n###### 14.使用实现promise\n\n同时发送多个请求，并且多个请求发送成功之后才算成功，怎么实现？\\\n\n```\n### (promise.all = [])\nconst p = Promise.all([p1, p2, p3]);\n```\n\np的状态由p1、p2、p3决定，分成两种情况。\\\n\n（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\\\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n###### 15.vue 视图组件的使用，父组件与子组件数据的传递方式\n父组件数据如何传递给子组件呢？可以通过props属性来实现\n子组件通过props来接收数据:\n\n因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，从而达到改变子组件数据的目的.\\\n\n子组件使用.$emit 向上广播事件\n\n```\nthis.$emit('upup','hehe');\n# 主动触发upup方法，'hehe'为向父组件传递的数据\n```\n\n\n```\n<child @upup=\"change\" :msg=\"msg\"></child>\n# 监听子组件触发的upup事件,然后调用change方法\n```\n\n###### 16.vuex 的的使用\n答：vue框架中状态管理。在main.js引入store，注入。\\\n新建了一个目录store，….. export 。\n场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车\n\n###### 17.vuex有哪几种属性？\n答：有五种，分别是 State、 Getter、Mutation 、Action、 Module\n###### 18.vuex的State特性是？\n答：\\\n一、Vuex就是一个仓库，仓库里面放了很多对象。其中state就是数据源存放     地，对应于与一般Vue对象里面的data\\\n二、state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新\\\n三、它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中\n###### 19.vuex的Getter特性是？\n答：\n一、getters 可以对State进行计算操作，它就是Store的计算属性\\\n二、 虽然在组件内也可以做计算属性，但是getters 可以在多组件之间复用\\\n三、 如果一个状态只在一个组件内使用，是可以不用getters\n######  20、vuex的Mutation特性是？\n答：\n一、Action 类似于 mutation，不同在于：\n二、Action 提交的是 mutation，而不是直接变更状态。\n三、Action 可以包含任意异步操作\n###### 21.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\n答：\n一、如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里.\n\n二、如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用，并包装成promise返回，在调用处用async await处理返回的数据。如果不要复用这个请求，那么直接写在vue文件里很方便。\n###### 22.不用Vuex会带来什么问题？\n答：\\\n一、可维护性会下降，你要想修改数据，你得维护三个地方\\\n\n二、可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的\\\n\n三、增加耦合，大量的上传派发，会让耦合性大大的增加，本来Vue用Component就是为了减少耦合，现在这么用，和组件化的初衷相背。\n###### 23.对模块化的理解\n理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用\n\n主要考察你是否有做过比较复杂、庞大的项目，是否具备一定的编程思想。随着前端技术的发展,前端编写的代码量也越来越大，就需要对代码有很好的管理。目前比较好的开发语言就是OOP（面向对象编程）编程语言，例如java语言、C#语言。从JavaScript新的版本来看，要求JavaScript具有封装、继承、多态这样的优点需求越来越明显。这道题属于编程思想上范畴。\n###### 24.什么是模块化\n所谓的模块化开发就是封装细节，提供使用接口，彼此之间互不影响，每个模块都是实现某一特定的功能。模块化开发的基础就是函数\n\nhttps://zhuanlan.zhihu.com/p/24355610\\\n\n###### 25.页面有哪几种布局方式及实现方法\nhttps://www.cnblogs.com/yanayana/p/7066948.html\n###### 26.position的几个属性，及定位的方式\n\n```\n● absolute\n      ○ 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n  ● fixed （老IE不支持）\n      ○ 生成绝对定位的元素，相对于浏览器窗口进行定位。\n  ● relative\n      ○ 生成相对定位的元素，相对于其正常位置进行定位。\n  ● static\n      ○ 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right - z-index 声明）。\n  ● inherit\n      ○ 规定从父元素继承 position 属性的值\n```\n\n###### 27.浏览器加载页面的整个过程简述, 描述浏览器的渲染过程，DOM树和渲染树的区别？\n\n```\n● 浏览器的渲染过程：\n      ○ 解析HTML构建 DOM(DOM树)，并行请求 css/image/js\n      ○ CSS 文件下载完成，开始构建 CSSOM(CSS树)\n      ○ CSSOM 构建结束后，和 DOM 一起生成 Render Tree(渲染树)\n      ○ 布局(Layout)：计算出每个节点在屏幕中的位置\n      ○ 显示(Painting)：通过显卡把页面画到屏幕上\n  ● DOM树 和 渲染树 的区别：\n      ○ DOM树与HTML标签一一对应，包括head和隐藏元素\n      ○ 渲染树不包括head和隐藏元素，大段文本的每一个行都是独立节点，每一个节点都有对应的css属性\n```\n\n###### 28.ajax的实现\n\n```\n\n ● ● 异步传输 + js + xml,\n  ● 所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验\n  ● 创建XMLHttpRequest对象,也就是创建一个异步调用对象\n  ● 建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n  ● 设置响应HTTP请求状态变化的函数\n  ● 发送HTTP请求\n  ● 获取异步调用返回的数据\n  ● 用JavaScript和DOM实现局部刷新\n```\n\n###### 29.函数中this的指向，类中this的指向\n\n```\nthis 总是指向函数的直接调用者\n\n如果有 new 关键字，this 指向 new 出来的实例对象\n\n在事件中，this指向触发这个事件的对象\n\nIE下 attachEvent 中的this总是指向全局对象Window\n```\n\n###### 30.介绍一下浏览器对标签的加载方式\n\n###### 31.介绍事件冒泡\n\n```\n事件的三个阶段\n  ● 捕获、目标、冒泡\n  ● 按照W3C标准的事件：首是进入捕获阶段，直到达到目标元素，再进入冒泡阶段\n  ● 事件执行次数（DOM2-addEventListener）：元素上绑定事件的个数\n      ○ 注意1：前提是事件被确实触发\n      ○ 注意2：事件绑定几次就算几个事件，即使类型和功能完全一样也不会“覆盖”\n  ● 事件执行顺序：判断的关键是否目标元素\n      ○ 非目标元素：根据W3C的标准执行：捕获->目标元素->冒泡（不依据事件绑定顺序）\n      ○ 目标元素：依据事件绑定顺序：先绑定的事件先执行（不依据捕获冒泡标准）\n      ○ 最终顺序：父元素捕获->目标元素事件1->目标元素事件2->子元素捕获->子元素冒泡->父元素冒泡\n      ○ 注意：子元素事件执行前提 事件确实“落”到子元素布局区域上，而不是简单的具有嵌套关系\n  ● 阻止事件默认行为\n      ○ W3C: e.preventDefault()\n      ○ IE: window.event.returnValue = false\n  ● 阻止事件传播\n      ○ W3C: e.stopPropagation()\n      ○ IE: window.event.cancelBubble = true\n```\n\n###### 29.new操作符具体干了什么呢?\n\n```\n1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n2、属性和方法被加入到 this 引用的对象中。\n3、新创建的对象由 this 所引用，并且最后隐式的返回 this\n```\n\n###### 30.浮动会对页面产生什么影响，怎么清除浮动\n  ● 浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上\n\n\n```\n列举几种清除浮动的方式？\n  ● 添加额外标签，例如 <div style=\"clear:both\"></div>\n  ● 使用 br 标签和其自身的 clear 属性，例如 <br clear=\"all\" />\n  ● 父元素设置 overflow：hidden; 在IE6中还需要触发 hasLayout，例如zoom：1;\n  ● 父元素也设置浮动\n  ● 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout\n  ● 清除浮动最佳实践（after伪元素闭合浮动）：\n\n.clearfix:after{\n    content: \"\\200B\";\n    display: table;\n    height: 0;\n    clear: both;\n  }\n  .clearfix{\n    *zoom: 1;\n  }\n```\n\n###### 31.javascript的本地对象，内置对象和宿主对象\n\n```\n本地对象为独立于宿主环境的ECMAScript提供的对象，包括Array Object RegExp等可以new实例化的对象\n内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)\n宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象\n\n  ● 数据封装类对象：Object、Array、Boolean、Number、String\n  ● 其他对象：Function、Arguments、Math、Date、RegExp、Error\n  ● ES6新增对象：Symbol、Map、Set、Promises、Proxy、Reflect\n```\n\n###### 32webSocket:\nweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)\nweb sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。\n只有在支持web socket协议的服务器上才能正常工作。\n","source":"_posts/前端面试题总结.md","raw":"---\nlayout: posts\ntitle: 前端面试题总结\ndate: 2018-05-08 23:22:48\ntags: \"javaScript\"\n---\n\n###  面试题总结\n\n---\n###### 1.http 网站请求得整个过程\n\n```\n1.域名解析\n```\n\n就是将网站名称转变成IP地址：localhost-->127.0.0.1，像什么hosts文件，DNS域名解析等等可以实现这种功能\n\n```\n2. 发起TCP的3次握手\n```\n\n在客户机和服务器之间建立正常的TCP网络连接时：\n\t\t客户机首先发出一个SYN消息，\n\t\t服务器使用SYN+ACK应答表示接收到了这个消息，\n\t\t最后客户机再以ACK消息响应。\n\t这样在客户机和服务器之间才能建立起\n\n<!-- more -->\n可靠的TCP连接，数据才可以在客户机和服务器之间传递。\n```\n3. 建立TCP连接后发起http请求\n```\n\n发起HTTP请求(HTTP Request)\n所谓的HTTP请求，也就是Web客户端向Web服务器发送信息，这个信息由如下三部分组成：\n请求头，请求行，请求方式(只在POST请求中存在，因为GET请求并不包含任何实体)\n\n```\n4. 服务器端响应http请求\n```\n浏览器得到html代码\n\n```\n5. 浏览器解析html代码，\n```\n并请求html代码中的资源\n了解持久连接\n有时候我们获取一个HTML页面，在对浏览器对HTML解析的过程中，如果发现额外的URL需要获取的内容，会再次发起HTTP请求去服务器获取，比如样式文件，图片。许多个HTTP请求，只依靠一个TCP连接就够了，这就是所谓的持久连接。也是所谓的一次HTTP请求完成\n```\n。\n6. 浏览器对页面进行渲染呈现给用户\n```\n\n###### 2.webpack glup 得去别，AMD、CMD得区别\nsea.js遵循CMD规范.书写方式类似node.js的书写模板代码.依赖的自动加载,配置的简洁清晰.说白了就是懒加载.\n\nrequire.js遵循AMD规范,CMD和AMD基本相同,最大的区别是就CMD是懒加载,AMD是预加载.\n\n简单来说,就是sea.js属于懒加载,require.js属于预加载.\n\n在这里,顺便扩展一下预加载和懒加载的优缺点\n\n预加载:当第一次访问时将所有的文件加载出来\n优点:第一次访问完成以后, 再次访问的速度会很快\n缺点:第一次加载页面要等待很久.\n\n懒加载:使用的时候才会加载对应的文件.\n优点:第一次访问速度相对快点\n缺点:再访问其他新的模块时速度会变慢.\n\ngulp是一个基于流的构建工具，相对其他构件工具来说，更简洁更高效。\nwebpack是模块化管理的工具，使用webpack可实现模块按需加载，模块预处理，模块打包等功能\nhttps://www.jianshu.com/p/9724c47b406c\n\nwebpack 模块化打包原理：\nhttp://blog.csdn.net/u014168594/article/details/77198729）\n\n  1. 一切皆模块：\n正如js文件可以是一个“模块（module）”一样，其他的（如css、image或html）文件也可视作模 块。因此，你可以require(‘myJSfile.js’)亦可以require(‘myCSSfile.css’)。这意味着我们可以将事物（业务）分割成更小的易于管理的片段，从而达到重复利用等的目的。\n  2. 按需加载：\n传统的模块打包工具（module bundlers）最终将所有的模块编译生成一个庞大的bundle.js文件。但是在真实的app里边，“bundle.js”文件可能有10M到15M之大可能会导致应用一直处于加载中状态。因此Webpack使用许多特性来分割代码然后生成多个“bundle”文件，而且异步加载部分代码以实现按需加载。\n\n```\n3.require.js  得使用\n```\n\n\nhttp://www.ruanyifeng.com/blog/2012/11/require_js.html?bsh_bid=230697246\n\n\n```\n4.简单介绍一下webpack，及loader中得作用。\n```\n\n  ● css-loader 处理css中路径引用等问题\n  ● style-loader 动态把样式写入css\n  ● sass-loader scss编译器\n  ● less-loader less编译器\n  ● postcss-loader scss再处理\n\n\n```\n\n<!-- more -->\n5.webpack 简单配置描述：\n```\n https://www.cnblogs.com/pingfan1990/archive/2017/05/21/6886633.html\n\n```\n6.当webpack得打包文件过大时怎么进行优化\n```\n\n(1)webpack+react的项目打包出来的文件经常动则几百kb甚至上兆，究其原因有：\n  ● import css文件的时候，会直接作为模块一并打包到js文件中\n  ● 所有js模块 + 依赖都会打包到一个文件\n  ● React、ReactDOM文件过大\n\n针对第一种情况，我们可以使用\n\n\nextract-text-webpack-plugin，但缺点是会产生更长时间的编译，也没有HMR，还会增加额外的HTTP请求。对于css文件不是很大的情况最好还是不要使用该插件。\n针对第二种情况，我们可以通过提取公共代码块，这也是比较普遍的做法：\n\n(2).代码压缩 webpack提供的UglifyJS插件由于采用单线程压缩\n\n(3).happypack同时还利用缓存来使得rebuild 更快\n\n(4).alias和noPase resolve.alias是webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径\nhttps://github.com/hawx1993/tech-blog/issues/3\n\n\n###### 3.开发过程中遇到得兼容性问题，css . js 兼容\nhtml兼容：\n\n```\n1.IE\n```\n 条件注释---IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效\n\n\n```\n2.html\n```\n 新标签IE不支持--IE8/IE7/IE6支持通过document.createElement方法产生的标签\n\n\n```\n3.css:兼容\n```\n\nIe z-index问题 给父级添加position:relative\ncss hack原理及常用hack\n  ● 原理：利用不同浏览器对CSS的支持和解析结果不一样编写针对特定浏览器样式。\n\n  ● 常见的hack有\n\n     ○ 属性hack\n    ○ 选择器hack\n    ○ IE条件注释\n\n```\n4.js兼容\n```\n\n> 1.IE和标准下有哪些兼容性的写法\n>\n> Var ev = ev || window.event\n>\n> document.documentElement.clientWidth || document.body.clientWidth\n>\n> Var target = ev.srcElement||ev.target\n>\n> 2.标准的事件绑定方法函数为addEventListener，但IE下是attachEvent；\n> 3.事件的捕获方式不一致，标准浏览器是由外至内，而IE是由内到外，但是最后的结果是将IE的标准定为标准\n>\n> 4.window.event获取的。并且获取目标元素的方法也不同，标准浏览器是event.target，而IE下是event.srcElement\n\n\n###### 4.原型链，原型\n  ● 原型：\n\n\n> 1. JavaScript的所有对象中都包含了一个 [proto] 内部属性，这个属性所对应的就是该对象的原型\n>\n> 2.JavaScript的函数对象，除了原型 [proto] 之外，还预置了 prototype 属性\n>\n> 3. 当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型 [proto]。\n\n  ● 原型链：\n\n> 1. 当一个对象调用的属性/方法自身不存在时，就会去自己 [proto] 关联的前辈 prototype 对象上去找\n>\n> 2.如果没找到，就会去该 prototype 原型 [proto] 关联的前辈 prototype 去找。依次类推，直到找到属性/方法或 undefined 为止。从而形成了所谓的“原型链”\n\n  ● 原型特点：\n\n> JavaScript对象是通过引用来传递的，当修改原型时，与之相关的对象也会继承这一改变\n\n###### 5.rem 得计算方式。\n> 设计图750px,iphone 6 得屏幕宽度为375px,  之前设计图为640px\n>\n>   ● 假设拿到的设计稿和上述网易的一样都是750，Flexible会把设计稿分为10份，可以理解为页面width=10rem，即1rem=75px，所以根font-size（基准值）=75px。\n>\n> 之后的css换算rem公式为：\n>\n> px/75=rem,所以100px=100/75=1.33rem,50px=50/75=0.66rem\n> 9.闭包怎么理解，及使用场景。\n\n###### 6.简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\n> 使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值\n>\n>   ● 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域\n\n>   ● 闭包的特性：\n\n>    函数内再嵌套函数\\\n>    内部函数可以引用外层的参数和变量\\\n>     参数和变量不会被垃圾回收机制回收\n\n###### 7.css 选择器及权重问题\n\n>   ● id选择器（ # myid）\\\n>   ● 类选择器（.myclassname）\\\n>   ● 标签选择器（div, h1, p）\\\n>   ● 相邻选择器（h1 + p）\\\n>   ● 子选择器（ul > li）\\\n>   ● 后代选择器（li a）\\\n>   ● 通配符选择器（ * ）\\\n>   ● 属性选择器（a[rel = \"external\"]）\\\n>   ● 伪类选择器（a:hover, li:nth-child）\\\n>   ● 可继承的样式： font-size font-family color, UL LI DL DD DT\\\n>   ● 不可继承的样式：border padding margin width height\\\n> CSS优先级算法如何计算？\n>   ● 优先级就近原则，同权重情况下样式定义最近者为准\\\n>   ● 载入样式以最后载入的定位为准\\\n>   ● 优先级为: !important > id > class > tag \\\n> important 比内联优先级高\n\n###### 8.同源策略\n> 请解释一下 JavaScript 的同源策略\\\n>   ● 概念:同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape\\ Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议\\\n>   ● 指一段脚本只能读取来自同一来源的窗口和文档的属性\\\n> 为什么要有同源限制？\\\n>   ● 我们举例说明：比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手了。\\\n>   ● 缺点\\\n>       现在网站的JS都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节\n\n\n###### 9.跨域的几种方式，jsonp的实现原理\n\n1、 通过jsonp跨域\\\n2、 document.domain + iframe跨域\\\n3、 location.hash + iframe\n4、 window.name + iframe跨域\\\n5、 postMessage跨域\\\n6、 跨域资源共享（CORS）\\\n7、 nginx代理跨域\\\n8、 nodejs中间件代理跨域\\\n9、 WebSocket协议跨域\\\n\njsonp:\\\nJsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术\n\ndocument.domain\\\n目前，很多大型网站都会使用多个子域名，而浏览器的同源策略对于它们来说就有点过于严格了。如，来自www.a.com想要获取document.a.com中的数据。只要基础域名相同，便可以通过修改document.domain为基础域名的方式来进行通信，但是需要注意的是协议和端口也必须相同。\n\n所谓反向代理服务器，它是代理服务器中的一种。客户端直接发送请求给代理服务器，然后代理服务器会根据客户端的请求，从真实的资源服务器中获取资源返回给客户端。所以反向代理就隐藏了真实的服务器。利用这种特性，我们可以通过将其他域名的资源映射成自己的域名来规避开跨域问题\n\n利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。\n\n###### 10.webpack反向代理实现方式\nwebpack-dev-server配置跨域方案\\\n如果你项目是用webpack作为前端自动化构建工具的话，那么可以引用webpack-dev-server来进行配置跨域方案。webpack-dev-server是一个小型的nodejs服务器，是基于express框架的，用于实时监听和打包编译静态资源。其中里面有一个属性是proxy，是专门来配置代理请求接口的。\n\n###### 11. mongoDB特性及应用场景，与mysql得不同点\nhttps://yq.aliyun.com/articles/64352?spm=5176.8091938.0.0.oAHbxp\\\n开源的NoSQL数据库,用于存储非结构化数据,\n    SQL中的绝大多数操作有对应的方式来实现,\n    采用BSON描述数据类型\n\n用在应用服务器的日志记录，查找起来比文本灵活，导出也很方便。也是给应用练手，从外围系统开始使用MongoDB。 用在一些第三方信息的获取或者抓取，因为MongoDB的schema-less，所有格式灵活，不用为了各种格式不一样的信息专门设计统一的格式，极大的减少开发的工作。\nmongodb之前有用过，主要用来存储一些监控数据，No schema 对开发人员来说，真的很方便，增加字段不用改表结构，而且学习成本极低。\n\n###### 12.es6新增特性\n现在如果你还不知道es6的新特性的话，可能真的就很难找到工作了\n\n###### 13.promise的用法\n\n\n```\ngetJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n```\n\n\nPromise.prototype.finally()\\\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。\n\nPromise.all() \\\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n###### 14.使用实现promise\n\n同时发送多个请求，并且多个请求发送成功之后才算成功，怎么实现？\\\n\n```\n### (promise.all = [])\nconst p = Promise.all([p1, p2, p3]);\n```\n\np的状态由p1、p2、p3决定，分成两种情况。\\\n\n（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\\\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n###### 15.vue 视图组件的使用，父组件与子组件数据的传递方式\n父组件数据如何传递给子组件呢？可以通过props属性来实现\n子组件通过props来接收数据:\n\n因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，从而达到改变子组件数据的目的.\\\n\n子组件使用.$emit 向上广播事件\n\n```\nthis.$emit('upup','hehe');\n# 主动触发upup方法，'hehe'为向父组件传递的数据\n```\n\n\n```\n<child @upup=\"change\" :msg=\"msg\"></child>\n# 监听子组件触发的upup事件,然后调用change方法\n```\n\n###### 16.vuex 的的使用\n答：vue框架中状态管理。在main.js引入store，注入。\\\n新建了一个目录store，….. export 。\n场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车\n\n###### 17.vuex有哪几种属性？\n答：有五种，分别是 State、 Getter、Mutation 、Action、 Module\n###### 18.vuex的State特性是？\n答：\\\n一、Vuex就是一个仓库，仓库里面放了很多对象。其中state就是数据源存放     地，对应于与一般Vue对象里面的data\\\n二、state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新\\\n三、它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中\n###### 19.vuex的Getter特性是？\n答：\n一、getters 可以对State进行计算操作，它就是Store的计算属性\\\n二、 虽然在组件内也可以做计算属性，但是getters 可以在多组件之间复用\\\n三、 如果一个状态只在一个组件内使用，是可以不用getters\n######  20、vuex的Mutation特性是？\n答：\n一、Action 类似于 mutation，不同在于：\n二、Action 提交的是 mutation，而不是直接变更状态。\n三、Action 可以包含任意异步操作\n###### 21.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\n答：\n一、如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里.\n\n二、如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用，并包装成promise返回，在调用处用async await处理返回的数据。如果不要复用这个请求，那么直接写在vue文件里很方便。\n###### 22.不用Vuex会带来什么问题？\n答：\\\n一、可维护性会下降，你要想修改数据，你得维护三个地方\\\n\n二、可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的\\\n\n三、增加耦合，大量的上传派发，会让耦合性大大的增加，本来Vue用Component就是为了减少耦合，现在这么用，和组件化的初衷相背。\n###### 23.对模块化的理解\n理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用\n\n主要考察你是否有做过比较复杂、庞大的项目，是否具备一定的编程思想。随着前端技术的发展,前端编写的代码量也越来越大，就需要对代码有很好的管理。目前比较好的开发语言就是OOP（面向对象编程）编程语言，例如java语言、C#语言。从JavaScript新的版本来看，要求JavaScript具有封装、继承、多态这样的优点需求越来越明显。这道题属于编程思想上范畴。\n###### 24.什么是模块化\n所谓的模块化开发就是封装细节，提供使用接口，彼此之间互不影响，每个模块都是实现某一特定的功能。模块化开发的基础就是函数\n\nhttps://zhuanlan.zhihu.com/p/24355610\\\n\n###### 25.页面有哪几种布局方式及实现方法\nhttps://www.cnblogs.com/yanayana/p/7066948.html\n###### 26.position的几个属性，及定位的方式\n\n```\n● absolute\n      ○ 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n  ● fixed （老IE不支持）\n      ○ 生成绝对定位的元素，相对于浏览器窗口进行定位。\n  ● relative\n      ○ 生成相对定位的元素，相对于其正常位置进行定位。\n  ● static\n      ○ 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right - z-index 声明）。\n  ● inherit\n      ○ 规定从父元素继承 position 属性的值\n```\n\n###### 27.浏览器加载页面的整个过程简述, 描述浏览器的渲染过程，DOM树和渲染树的区别？\n\n```\n● 浏览器的渲染过程：\n      ○ 解析HTML构建 DOM(DOM树)，并行请求 css/image/js\n      ○ CSS 文件下载完成，开始构建 CSSOM(CSS树)\n      ○ CSSOM 构建结束后，和 DOM 一起生成 Render Tree(渲染树)\n      ○ 布局(Layout)：计算出每个节点在屏幕中的位置\n      ○ 显示(Painting)：通过显卡把页面画到屏幕上\n  ● DOM树 和 渲染树 的区别：\n      ○ DOM树与HTML标签一一对应，包括head和隐藏元素\n      ○ 渲染树不包括head和隐藏元素，大段文本的每一个行都是独立节点，每一个节点都有对应的css属性\n```\n\n###### 28.ajax的实现\n\n```\n\n ● ● 异步传输 + js + xml,\n  ● 所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验\n  ● 创建XMLHttpRequest对象,也就是创建一个异步调用对象\n  ● 建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n  ● 设置响应HTTP请求状态变化的函数\n  ● 发送HTTP请求\n  ● 获取异步调用返回的数据\n  ● 用JavaScript和DOM实现局部刷新\n```\n\n###### 29.函数中this的指向，类中this的指向\n\n```\nthis 总是指向函数的直接调用者\n\n如果有 new 关键字，this 指向 new 出来的实例对象\n\n在事件中，this指向触发这个事件的对象\n\nIE下 attachEvent 中的this总是指向全局对象Window\n```\n\n###### 30.介绍一下浏览器对标签的加载方式\n\n###### 31.介绍事件冒泡\n\n```\n事件的三个阶段\n  ● 捕获、目标、冒泡\n  ● 按照W3C标准的事件：首是进入捕获阶段，直到达到目标元素，再进入冒泡阶段\n  ● 事件执行次数（DOM2-addEventListener）：元素上绑定事件的个数\n      ○ 注意1：前提是事件被确实触发\n      ○ 注意2：事件绑定几次就算几个事件，即使类型和功能完全一样也不会“覆盖”\n  ● 事件执行顺序：判断的关键是否目标元素\n      ○ 非目标元素：根据W3C的标准执行：捕获->目标元素->冒泡（不依据事件绑定顺序）\n      ○ 目标元素：依据事件绑定顺序：先绑定的事件先执行（不依据捕获冒泡标准）\n      ○ 最终顺序：父元素捕获->目标元素事件1->目标元素事件2->子元素捕获->子元素冒泡->父元素冒泡\n      ○ 注意：子元素事件执行前提 事件确实“落”到子元素布局区域上，而不是简单的具有嵌套关系\n  ● 阻止事件默认行为\n      ○ W3C: e.preventDefault()\n      ○ IE: window.event.returnValue = false\n  ● 阻止事件传播\n      ○ W3C: e.stopPropagation()\n      ○ IE: window.event.cancelBubble = true\n```\n\n###### 29.new操作符具体干了什么呢?\n\n```\n1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n2、属性和方法被加入到 this 引用的对象中。\n3、新创建的对象由 this 所引用，并且最后隐式的返回 this\n```\n\n###### 30.浮动会对页面产生什么影响，怎么清除浮动\n  ● 浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上\n\n\n```\n列举几种清除浮动的方式？\n  ● 添加额外标签，例如 <div style=\"clear:both\"></div>\n  ● 使用 br 标签和其自身的 clear 属性，例如 <br clear=\"all\" />\n  ● 父元素设置 overflow：hidden; 在IE6中还需要触发 hasLayout，例如zoom：1;\n  ● 父元素也设置浮动\n  ● 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout\n  ● 清除浮动最佳实践（after伪元素闭合浮动）：\n\n.clearfix:after{\n    content: \"\\200B\";\n    display: table;\n    height: 0;\n    clear: both;\n  }\n  .clearfix{\n    *zoom: 1;\n  }\n```\n\n###### 31.javascript的本地对象，内置对象和宿主对象\n\n```\n本地对象为独立于宿主环境的ECMAScript提供的对象，包括Array Object RegExp等可以new实例化的对象\n内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)\n宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象\n\n  ● 数据封装类对象：Object、Array、Boolean、Number、String\n  ● 其他对象：Function、Arguments、Math、Date、RegExp、Error\n  ● ES6新增对象：Symbol、Map、Set、Promises、Proxy、Reflect\n```\n\n###### 32webSocket:\nweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)\nweb sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。\n只有在支持web socket协议的服务器上才能正常工作。\n","slug":"前端面试题总结","published":1,"updated":"2018-05-08T16:08:23.063Z","comments":1,"photos":[],"link":"","_id":"cjgxveygo000418tncbvqtx2p","content":"<h3 id=\"面试题总结\"><a href=\"#面试题总结\" class=\"headerlink\" title=\"面试题总结\"></a>面试题总结</h3><hr>\n<h6 id=\"1-http-网站请求得整个过程\"><a href=\"#1-http-网站请求得整个过程\" class=\"headerlink\" title=\"1.http 网站请求得整个过程\"></a>1.http 网站请求得整个过程</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.域名解析</span><br></pre></td></tr></table></figure>\n<p>就是将网站名称转变成IP地址：localhost–&gt;127.0.0.1，像什么hosts文件，DNS域名解析等等可以实现这种功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 发起TCP的3次握手</span><br></pre></td></tr></table></figure>\n<p>在客户机和服务器之间建立正常的TCP网络连接时：<br>        客户机首先发出一个SYN消息，<br>        服务器使用SYN+ACK应答表示接收到了这个消息，<br>        最后客户机再以ACK消息响应。<br>    这样在客户机和服务器之间才能建立起</p>\n<a id=\"more\"></a>\n<p>可靠的TCP连接，数据才可以在客户机和服务器之间传递。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. 建立TCP连接后发起http请求</span><br></pre></td></tr></table></figure></p>\n<p>发起HTTP请求(HTTP Request)<br>所谓的HTTP请求，也就是Web客户端向Web服务器发送信息，这个信息由如下三部分组成：<br>请求头，请求行，请求方式(只在POST请求中存在，因为GET请求并不包含任何实体)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4. 服务器端响应http请求</span><br></pre></td></tr></table></figure>\n<p>浏览器得到html代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5. 浏览器解析html代码，</span><br></pre></td></tr></table></figure>\n<p>并请求html代码中的资源<br>了解持久连接<br>有时候我们获取一个HTML页面，在对浏览器对HTML解析的过程中，如果发现额外的URL需要获取的内容，会再次发起HTTP请求去服务器获取，比如样式文件，图片。许多个HTTP请求，只依靠一个TCP连接就够了，这就是所谓的持久连接。也是所谓的一次HTTP请求完成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">。</span><br><span class=\"line\">6. 浏览器对页面进行渲染呈现给用户</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-webpack-glup-得去别，AMD、CMD得区别\"><a href=\"#2-webpack-glup-得去别，AMD、CMD得区别\" class=\"headerlink\" title=\"2.webpack glup 得去别，AMD、CMD得区别\"></a>2.webpack glup 得去别，AMD、CMD得区别</h6><p>sea.js遵循CMD规范.书写方式类似node.js的书写模板代码.依赖的自动加载,配置的简洁清晰.说白了就是懒加载.</p>\n<p>require.js遵循AMD规范,CMD和AMD基本相同,最大的区别是就CMD是懒加载,AMD是预加载.</p>\n<p>简单来说,就是sea.js属于懒加载,require.js属于预加载.</p>\n<p>在这里,顺便扩展一下预加载和懒加载的优缺点</p>\n<p>预加载:当第一次访问时将所有的文件加载出来<br>优点:第一次访问完成以后, 再次访问的速度会很快<br>缺点:第一次加载页面要等待很久.</p>\n<p>懒加载:使用的时候才会加载对应的文件.<br>优点:第一次访问速度相对快点<br>缺点:再访问其他新的模块时速度会变慢.</p>\n<p>gulp是一个基于流的构建工具，相对其他构件工具来说，更简洁更高效。<br>webpack是模块化管理的工具，使用webpack可实现模块按需加载，模块预处理，模块打包等功能<br><a href=\"https://www.jianshu.com/p/9724c47b406c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9724c47b406c</a></p>\n<p>webpack 模块化打包原理：<br><a href=\"http://blog.csdn.net/u014168594/article/details/77198729）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u014168594/article/details/77198729）</a></p>\n<ol>\n<li>一切皆模块：<br>正如js文件可以是一个“模块（module）”一样，其他的（如css、image或html）文件也可视作模 块。因此，你可以require(‘myJSfile.js’)亦可以require(‘myCSSfile.css’)。这意味着我们可以将事物（业务）分割成更小的易于管理的片段，从而达到重复利用等的目的。</li>\n<li>按需加载：<br>传统的模块打包工具（module bundlers）最终将所有的模块编译生成一个庞大的bundle.js文件。但是在真实的app里边，“bundle.js”文件可能有10M到15M之大可能会导致应用一直处于加载中状态。因此Webpack使用许多特性来分割代码然后生成多个“bundle”文件，而且异步加载部分代码以实现按需加载。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.require.js  得使用</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html?bsh_bid=230697246\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2012/11/require_js.html?bsh_bid=230697246</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.简单介绍一下webpack，及loader中得作用。</span><br></pre></td></tr></table></figure>\n<p>  ● css-loader 处理css中路径引用等问题<br>  ● style-loader 动态把样式写入css<br>  ● sass-loader scss编译器<br>  ● less-loader less编译器<br>  ● postcss-loader scss再处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">5.webpack 简单配置描述：</span><br></pre></td></tr></table></figure>\n<p> <a href=\"https://www.cnblogs.com/pingfan1990/archive/2017/05/21/6886633.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pingfan1990/archive/2017/05/21/6886633.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.当webpack得打包文件过大时怎么进行优化</span><br></pre></td></tr></table></figure>\n<p>(1)webpack+react的项目打包出来的文件经常动则几百kb甚至上兆，究其原因有：<br>  ● import css文件的时候，会直接作为模块一并打包到js文件中<br>  ● 所有js模块 + 依赖都会打包到一个文件<br>  ● React、ReactDOM文件过大</p>\n<p>针对第一种情况，我们可以使用</p>\n<p>extract-text-webpack-plugin，但缺点是会产生更长时间的编译，也没有HMR，还会增加额外的HTTP请求。对于css文件不是很大的情况最好还是不要使用该插件。<br>针对第二种情况，我们可以通过提取公共代码块，这也是比较普遍的做法：</p>\n<p>(2).代码压缩 webpack提供的UglifyJS插件由于采用单线程压缩</p>\n<p>(3).happypack同时还利用缓存来使得rebuild 更快</p>\n<p>(4).alias和noPase resolve.alias是webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径<br><a href=\"https://github.com/hawx1993/tech-blog/issues/3\" target=\"_blank\" rel=\"noopener\">https://github.com/hawx1993/tech-blog/issues/3</a></p>\n<h6 id=\"3-开发过程中遇到得兼容性问题，css-js-兼容\"><a href=\"#3-开发过程中遇到得兼容性问题，css-js-兼容\" class=\"headerlink\" title=\"3.开发过程中遇到得兼容性问题，css . js 兼容\"></a>3.开发过程中遇到得兼容性问题，css . js 兼容</h6><p>html兼容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.IE</span><br></pre></td></tr></table></figure>\n<p> 条件注释—IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.html</span><br></pre></td></tr></table></figure>\n<p> 新标签IE不支持–IE8/IE7/IE6支持通过document.createElement方法产生的标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.css:兼容</span><br></pre></td></tr></table></figure>\n<p>Ie z-index问题 给父级添加position:relative<br>css hack原理及常用hack<br>  ● 原理：利用不同浏览器对CSS的支持和解析结果不一样编写针对特定浏览器样式。</p>\n<p>  ● 常见的hack有</p>\n<pre><code> ○ 属性hack\n○ 选择器hack\n○ IE条件注释\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.js兼容</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.IE和标准下有哪些兼容性的写法</p>\n<p>Var ev = ev || window.event</p>\n<p>document.documentElement.clientWidth || document.body.clientWidth</p>\n<p>Var target = ev.srcElement||ev.target</p>\n<p>2.标准的事件绑定方法函数为addEventListener，但IE下是attachEvent；<br>3.事件的捕获方式不一致，标准浏览器是由外至内，而IE是由内到外，但是最后的结果是将IE的标准定为标准</p>\n<p>4.window.event获取的。并且获取目标元素的方法也不同，标准浏览器是event.target，而IE下是event.srcElement</p>\n</blockquote>\n<h6 id=\"4-原型链，原型\"><a href=\"#4-原型链，原型\" class=\"headerlink\" title=\"4.原型链，原型\"></a>4.原型链，原型</h6><p>  ● 原型：</p>\n<blockquote>\n<ol>\n<li>JavaScript的所有对象中都包含了一个 [proto] 内部属性，这个属性所对应的就是该对象的原型</li>\n</ol>\n<p>2.JavaScript的函数对象，除了原型 [proto] 之外，还预置了 prototype 属性</p>\n<ol start=\"3\">\n<li>当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型 [proto]。</li>\n</ol>\n</blockquote>\n<p>  ● 原型链：</p>\n<blockquote>\n<ol>\n<li>当一个对象调用的属性/方法自身不存在时，就会去自己 [proto] 关联的前辈 prototype 对象上去找</li>\n</ol>\n<p>2.如果没找到，就会去该 prototype 原型 [proto] 关联的前辈 prototype 去找。依次类推，直到找到属性/方法或 undefined 为止。从而形成了所谓的“原型链”</p>\n</blockquote>\n<p>  ● 原型特点：</p>\n<blockquote>\n<p>JavaScript对象是通过引用来传递的，当修改原型时，与之相关的对象也会继承这一改变</p>\n</blockquote>\n<h6 id=\"5-rem-得计算方式。\"><a href=\"#5-rem-得计算方式。\" class=\"headerlink\" title=\"5.rem 得计算方式。\"></a>5.rem 得计算方式。</h6><blockquote>\n<p>设计图750px,iphone 6 得屏幕宽度为375px,  之前设计图为640px</p>\n<p>  ● 假设拿到的设计稿和上述网易的一样都是750，Flexible会把设计稿分为10份，可以理解为页面width=10rem，即1rem=75px，所以根font-size（基准值）=75px。</p>\n<p>之后的css换算rem公式为：</p>\n<p>px/75=rem,所以100px=100/75=1.33rem,50px=50/75=0.66rem<br>9.闭包怎么理解，及使用场景。</p>\n</blockquote>\n<h6 id=\"6-简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\"><a href=\"#6-简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\" class=\"headerlink\" title=\"6.简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\"></a>6.简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域</h6><blockquote>\n<p>使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值</p>\n<p>  ● 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</p>\n</blockquote>\n<blockquote>\n<p>  ● 闭包的特性：</p>\n</blockquote>\n<blockquote>\n<p>   函数内再嵌套函数\\<br>   内部函数可以引用外层的参数和变量\\<br>    参数和变量不会被垃圾回收机制回收</p>\n</blockquote>\n<h6 id=\"7-css-选择器及权重问题\"><a href=\"#7-css-选择器及权重问题\" class=\"headerlink\" title=\"7.css 选择器及权重问题\"></a>7.css 选择器及权重问题</h6><blockquote>\n<p>  ● id选择器（ # myid）\\<br>  ● 类选择器（.myclassname）\\<br>  ● 标签选择器（div, h1, p）\\<br>  ● 相邻选择器（h1 + p）\\<br>  ● 子选择器（ul &gt; li）\\<br>  ● 后代选择器（li a）\\<br>  ● 通配符选择器（ * ）\\<br>  ● 属性选择器（a[rel = “external”]）\\<br>  ● 伪类选择器（a:hover, li:nth-child）\\<br>  ● 可继承的样式： font-size font-family color, UL LI DL DD DT\\<br>  ● 不可继承的样式：border padding margin width height\\<br>CSS优先级算法如何计算？<br>  ● 优先级就近原则，同权重情况下样式定义最近者为准\\<br>  ● 载入样式以最后载入的定位为准\\<br>  ● 优先级为: !important &gt; id &gt; class &gt; tag \\<br>important 比内联优先级高</p>\n</blockquote>\n<h6 id=\"8-同源策略\"><a href=\"#8-同源策略\" class=\"headerlink\" title=\"8.同源策略\"></a>8.同源策略</h6><blockquote>\n<p>请解释一下 JavaScript 的同源策略\\<br>  ● 概念:同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape\\ Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议\\<br>  ● 指一段脚本只能读取来自同一来源的窗口和文档的属性\\<br>为什么要有同源限制？\\<br>  ● 我们举例说明：比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手了。\\<br>  ● 缺点\\<br>      现在网站的JS都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节</p>\n</blockquote>\n<h6 id=\"9-跨域的几种方式，jsonp的实现原理\"><a href=\"#9-跨域的几种方式，jsonp的实现原理\" class=\"headerlink\" title=\"9.跨域的几种方式，jsonp的实现原理\"></a>9.跨域的几种方式，jsonp的实现原理</h6><p>1、 通过jsonp跨域\\<br>2、 document.domain + iframe跨域\\<br>3、 location.hash + iframe<br>4、 window.name + iframe跨域\\<br>5、 postMessage跨域\\<br>6、 跨域资源共享（CORS）\\<br>7、 nginx代理跨域\\<br>8、 nodejs中间件代理跨域\\<br>9、 WebSocket协议跨域\\</p>\n<p>jsonp:\\<br>Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术</p>\n<p>document.domain\\<br>目前，很多大型网站都会使用多个子域名，而浏览器的同源策略对于它们来说就有点过于严格了。如，来自<a href=\"http://www.a.com想要获取document.a.com中的数据。只要基础域名相同，便可以通过修改document.domain为基础域名的方式来进行通信，但是需要注意的是协议和端口也必须相同。\" target=\"_blank\" rel=\"noopener\">www.a.com想要获取document.a.com中的数据。只要基础域名相同，便可以通过修改document.domain为基础域名的方式来进行通信，但是需要注意的是协议和端口也必须相同。</a></p>\n<p>所谓反向代理服务器，它是代理服务器中的一种。客户端直接发送请求给代理服务器，然后代理服务器会根据客户端的请求，从真实的资源服务器中获取资源返回给客户端。所以反向代理就隐藏了真实的服务器。利用这种特性，我们可以通过将其他域名的资源映射成自己的域名来规避开跨域问题</p>\n<p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p>\n<h6 id=\"10-webpack反向代理实现方式\"><a href=\"#10-webpack反向代理实现方式\" class=\"headerlink\" title=\"10.webpack反向代理实现方式\"></a>10.webpack反向代理实现方式</h6><p>webpack-dev-server配置跨域方案\\<br>如果你项目是用webpack作为前端自动化构建工具的话，那么可以引用webpack-dev-server来进行配置跨域方案。webpack-dev-server是一个小型的nodejs服务器，是基于express框架的，用于实时监听和打包编译静态资源。其中里面有一个属性是proxy，是专门来配置代理请求接口的。</p>\n<h6 id=\"11-mongoDB特性及应用场景，与mysql得不同点\"><a href=\"#11-mongoDB特性及应用场景，与mysql得不同点\" class=\"headerlink\" title=\"11. mongoDB特性及应用场景，与mysql得不同点\"></a>11. mongoDB特性及应用场景，与mysql得不同点</h6><p><a href=\"https://yq.aliyun.com/articles/64352?spm=5176.8091938.0.0.oAHbxp\\\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/64352?spm=5176.8091938.0.0.oAHbxp\\</a><br>开源的NoSQL数据库,用于存储非结构化数据,<br>    SQL中的绝大多数操作有对应的方式来实现,<br>    采用BSON描述数据类型</p>\n<p>用在应用服务器的日志记录，查找起来比文本灵活，导出也很方便。也是给应用练手，从外围系统开始使用MongoDB。 用在一些第三方信息的获取或者抓取，因为MongoDB的schema-less，所有格式灵活，不用为了各种格式不一样的信息专门设计统一的格式，极大的减少开发的工作。<br>mongodb之前有用过，主要用来存储一些监控数据，No schema 对开发人员来说，真的很方便，增加字段不用改表结构，而且学习成本极低。</p>\n<h6 id=\"12-es6新增特性\"><a href=\"#12-es6新增特性\" class=\"headerlink\" title=\"12.es6新增特性\"></a>12.es6新增特性</h6><p>现在如果你还不知道es6的新特性的话，可能真的就很难找到工作了</p>\n<h6 id=\"13-promise的用法\"><a href=\"#13-promise的用法\" class=\"headerlink\" title=\"13.promise的用法\"></a>13.promise的用法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(&apos;/posts.json&apos;).then(function(posts) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;).catch(function(error) &#123;</span><br><span class=\"line\">  // 处理 getJSON 和 前一个回调函数运行时发生的错误</span><br><span class=\"line\">  console.log(&apos;发生错误！&apos;, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Promise.prototype.finally()\\<br>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<p>Promise.all() \\<br>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<h6 id=\"14-使用实现promise\"><a href=\"#14-使用实现promise\" class=\"headerlink\" title=\"14.使用实现promise\"></a>14.使用实现promise</h6><p>同时发送多个请求，并且多个请求发送成功之后才算成功，怎么实现？\\</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### (promise.all = [])</span><br><span class=\"line\">const p = Promise.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>p的状态由p1、p2、p3决定，分成两种情况。\\</p>\n<p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\\</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n<h6 id=\"15-vue-视图组件的使用，父组件与子组件数据的传递方式\"><a href=\"#15-vue-视图组件的使用，父组件与子组件数据的传递方式\" class=\"headerlink\" title=\"15.vue 视图组件的使用，父组件与子组件数据的传递方式\"></a>15.vue 视图组件的使用，父组件与子组件数据的传递方式</h6><p>父组件数据如何传递给子组件呢？可以通过props属性来实现<br>子组件通过props来接收数据:</p>\n<p>因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，从而达到改变子组件数据的目的.\\</p>\n<p>子组件使用.$emit 向上广播事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$emit(&apos;upup&apos;,&apos;hehe&apos;);</span><br><span class=\"line\"># 主动触发upup方法，&apos;hehe&apos;为向父组件传递的数据</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child @upup=&quot;change&quot; :msg=&quot;msg&quot;&gt;&lt;/child&gt;</span><br><span class=\"line\"># 监听子组件触发的upup事件,然后调用change方法</span><br></pre></td></tr></table></figure>\n<h6 id=\"16-vuex-的的使用\"><a href=\"#16-vuex-的的使用\" class=\"headerlink\" title=\"16.vuex 的的使用\"></a>16.vuex 的的使用</h6><p>答：vue框架中状态管理。在main.js引入store，注入。\\<br>新建了一个目录store，….. export 。<br>场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p>\n<h6 id=\"17-vuex有哪几种属性？\"><a href=\"#17-vuex有哪几种属性？\" class=\"headerlink\" title=\"17.vuex有哪几种属性？\"></a>17.vuex有哪几种属性？</h6><p>答：有五种，分别是 State、 Getter、Mutation 、Action、 Module</p>\n<h6 id=\"18-vuex的State特性是？\"><a href=\"#18-vuex的State特性是？\" class=\"headerlink\" title=\"18.vuex的State特性是？\"></a>18.vuex的State特性是？</h6><p>答：\\<br>一、Vuex就是一个仓库，仓库里面放了很多对象。其中state就是数据源存放     地，对应于与一般Vue对象里面的data\\<br>二、state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新\\<br>三、它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中</p>\n<h6 id=\"19-vuex的Getter特性是？\"><a href=\"#19-vuex的Getter特性是？\" class=\"headerlink\" title=\"19.vuex的Getter特性是？\"></a>19.vuex的Getter特性是？</h6><p>答：<br>一、getters 可以对State进行计算操作，它就是Store的计算属性\\<br>二、 虽然在组件内也可以做计算属性，但是getters 可以在多组件之间复用\\<br>三、 如果一个状态只在一个组件内使用，是可以不用getters</p>\n<h6 id=\"20、vuex的Mutation特性是？\"><a href=\"#20、vuex的Mutation特性是？\" class=\"headerlink\" title=\"20、vuex的Mutation特性是？\"></a>20、vuex的Mutation特性是？</h6><p>答：<br>一、Action 类似于 mutation，不同在于：<br>二、Action 提交的是 mutation，而不是直接变更状态。<br>三、Action 可以包含任意异步操作</p>\n<h6 id=\"21-Vue-js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\"><a href=\"#21-Vue-js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\" class=\"headerlink\" title=\"21.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\"></a>21.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？</h6><p>答：<br>一、如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里.</p>\n<p>二、如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用，并包装成promise返回，在调用处用async await处理返回的数据。如果不要复用这个请求，那么直接写在vue文件里很方便。</p>\n<h6 id=\"22-不用Vuex会带来什么问题？\"><a href=\"#22-不用Vuex会带来什么问题？\" class=\"headerlink\" title=\"22.不用Vuex会带来什么问题？\"></a>22.不用Vuex会带来什么问题？</h6><p>答：\\<br>一、可维护性会下降，你要想修改数据，你得维护三个地方\\</p>\n<p>二、可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的\\</p>\n<p>三、增加耦合，大量的上传派发，会让耦合性大大的增加，本来Vue用Component就是为了减少耦合，现在这么用，和组件化的初衷相背。</p>\n<h6 id=\"23-对模块化的理解\"><a href=\"#23-对模块化的理解\" class=\"headerlink\" title=\"23.对模块化的理解\"></a>23.对模块化的理解</h6><p>理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用</p>\n<p>主要考察你是否有做过比较复杂、庞大的项目，是否具备一定的编程思想。随着前端技术的发展,前端编写的代码量也越来越大，就需要对代码有很好的管理。目前比较好的开发语言就是OOP（面向对象编程）编程语言，例如java语言、C#语言。从JavaScript新的版本来看，要求JavaScript具有封装、继承、多态这样的优点需求越来越明显。这道题属于编程思想上范畴。</p>\n<h6 id=\"24-什么是模块化\"><a href=\"#24-什么是模块化\" class=\"headerlink\" title=\"24.什么是模块化\"></a>24.什么是模块化</h6><p>所谓的模块化开发就是封装细节，提供使用接口，彼此之间互不影响，每个模块都是实现某一特定的功能。模块化开发的基础就是函数</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24355610\\\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24355610\\</a></p>\n<h6 id=\"25-页面有哪几种布局方式及实现方法\"><a href=\"#25-页面有哪几种布局方式及实现方法\" class=\"headerlink\" title=\"25.页面有哪几种布局方式及实现方法\"></a>25.页面有哪几种布局方式及实现方法</h6><p><a href=\"https://www.cnblogs.com/yanayana/p/7066948.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yanayana/p/7066948.html</a></p>\n<h6 id=\"26-position的几个属性，及定位的方式\"><a href=\"#26-position的几个属性，及定位的方式\" class=\"headerlink\" title=\"26.position的几个属性，及定位的方式\"></a>26.position的几个属性，及定位的方式</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● absolute</span><br><span class=\"line\">      ○ 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。</span><br><span class=\"line\">  ● fixed （老IE不支持）</span><br><span class=\"line\">      ○ 生成绝对定位的元素，相对于浏览器窗口进行定位。</span><br><span class=\"line\">  ● relative</span><br><span class=\"line\">      ○ 生成相对定位的元素，相对于其正常位置进行定位。</span><br><span class=\"line\">  ● static</span><br><span class=\"line\">      ○ 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right - z-index 声明）。</span><br><span class=\"line\">  ● inherit</span><br><span class=\"line\">      ○ 规定从父元素继承 position 属性的值</span><br></pre></td></tr></table></figure>\n<h6 id=\"27-浏览器加载页面的整个过程简述-描述浏览器的渲染过程，DOM树和渲染树的区别？\"><a href=\"#27-浏览器加载页面的整个过程简述-描述浏览器的渲染过程，DOM树和渲染树的区别？\" class=\"headerlink\" title=\"27.浏览器加载页面的整个过程简述, 描述浏览器的渲染过程，DOM树和渲染树的区别？\"></a>27.浏览器加载页面的整个过程简述, 描述浏览器的渲染过程，DOM树和渲染树的区别？</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● 浏览器的渲染过程：</span><br><span class=\"line\">      ○ 解析HTML构建 DOM(DOM树)，并行请求 css/image/js</span><br><span class=\"line\">      ○ CSS 文件下载完成，开始构建 CSSOM(CSS树)</span><br><span class=\"line\">      ○ CSSOM 构建结束后，和 DOM 一起生成 Render Tree(渲染树)</span><br><span class=\"line\">      ○ 布局(Layout)：计算出每个节点在屏幕中的位置</span><br><span class=\"line\">      ○ 显示(Painting)：通过显卡把页面画到屏幕上</span><br><span class=\"line\">  ● DOM树 和 渲染树 的区别：</span><br><span class=\"line\">      ○ DOM树与HTML标签一一对应，包括head和隐藏元素</span><br><span class=\"line\">      ○ 渲染树不包括head和隐藏元素，大段文本的每一个行都是独立节点，每一个节点都有对应的css属性</span><br></pre></td></tr></table></figure>\n<h6 id=\"28-ajax的实现\"><a href=\"#28-ajax的实现\" class=\"headerlink\" title=\"28.ajax的实现\"></a>28.ajax的实现</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">● ● 异步传输 + js + xml,</span><br><span class=\"line\"> ● 所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验</span><br><span class=\"line\"> ● 创建XMLHttpRequest对象,也就是创建一个异步调用对象</span><br><span class=\"line\"> ● 建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</span><br><span class=\"line\"> ● 设置响应HTTP请求状态变化的函数</span><br><span class=\"line\"> ● 发送HTTP请求</span><br><span class=\"line\"> ● 获取异步调用返回的数据</span><br><span class=\"line\"> ● 用JavaScript和DOM实现局部刷新</span><br></pre></td></tr></table></figure>\n<h6 id=\"29-函数中this的指向，类中this的指向\"><a href=\"#29-函数中this的指向，类中this的指向\" class=\"headerlink\" title=\"29.函数中this的指向，类中this的指向\"></a>29.函数中this的指向，类中this的指向</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this 总是指向函数的直接调用者</span><br><span class=\"line\"></span><br><span class=\"line\">如果有 new 关键字，this 指向 new 出来的实例对象</span><br><span class=\"line\"></span><br><span class=\"line\">在事件中，this指向触发这个事件的对象</span><br><span class=\"line\"></span><br><span class=\"line\">IE下 attachEvent 中的this总是指向全局对象Window</span><br></pre></td></tr></table></figure>\n<h6 id=\"30-介绍一下浏览器对标签的加载方式\"><a href=\"#30-介绍一下浏览器对标签的加载方式\" class=\"headerlink\" title=\"30.介绍一下浏览器对标签的加载方式\"></a>30.介绍一下浏览器对标签的加载方式</h6><h6 id=\"31-介绍事件冒泡\"><a href=\"#31-介绍事件冒泡\" class=\"headerlink\" title=\"31.介绍事件冒泡\"></a>31.介绍事件冒泡</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件的三个阶段</span><br><span class=\"line\">  ● 捕获、目标、冒泡</span><br><span class=\"line\">  ● 按照W3C标准的事件：首是进入捕获阶段，直到达到目标元素，再进入冒泡阶段</span><br><span class=\"line\">  ● 事件执行次数（DOM2-addEventListener）：元素上绑定事件的个数</span><br><span class=\"line\">      ○ 注意1：前提是事件被确实触发</span><br><span class=\"line\">      ○ 注意2：事件绑定几次就算几个事件，即使类型和功能完全一样也不会“覆盖”</span><br><span class=\"line\">  ● 事件执行顺序：判断的关键是否目标元素</span><br><span class=\"line\">      ○ 非目标元素：根据W3C的标准执行：捕获-&gt;目标元素-&gt;冒泡（不依据事件绑定顺序）</span><br><span class=\"line\">      ○ 目标元素：依据事件绑定顺序：先绑定的事件先执行（不依据捕获冒泡标准）</span><br><span class=\"line\">      ○ 最终顺序：父元素捕获-&gt;目标元素事件1-&gt;目标元素事件2-&gt;子元素捕获-&gt;子元素冒泡-&gt;父元素冒泡</span><br><span class=\"line\">      ○ 注意：子元素事件执行前提 事件确实“落”到子元素布局区域上，而不是简单的具有嵌套关系</span><br><span class=\"line\">  ● 阻止事件默认行为</span><br><span class=\"line\">      ○ W3C: e.preventDefault()</span><br><span class=\"line\">      ○ IE: window.event.returnValue = false</span><br><span class=\"line\">  ● 阻止事件传播</span><br><span class=\"line\">      ○ W3C: e.stopPropagation()</span><br><span class=\"line\">      ○ IE: window.event.cancelBubble = true</span><br></pre></td></tr></table></figure>\n<h6 id=\"29-new操作符具体干了什么呢\"><a href=\"#29-new操作符具体干了什么呢\" class=\"headerlink\" title=\"29.new操作符具体干了什么呢?\"></a>29.new操作符具体干了什么呢?</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</span><br><span class=\"line\">2、属性和方法被加入到 this 引用的对象中。</span><br><span class=\"line\">3、新创建的对象由 this 所引用，并且最后隐式的返回 this</span><br></pre></td></tr></table></figure>\n<h6 id=\"30-浮动会对页面产生什么影响，怎么清除浮动\"><a href=\"#30-浮动会对页面产生什么影响，怎么清除浮动\" class=\"headerlink\" title=\"30.浮动会对页面产生什么影响，怎么清除浮动\"></a>30.浮动会对页面产生什么影响，怎么清除浮动</h6><p>  ● 浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列举几种清除浮动的方式？</span><br><span class=\"line\">  ● 添加额外标签，例如 &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  ● 使用 br 标签和其自身的 clear 属性，例如 &lt;br clear=&quot;all&quot; /&gt;</span><br><span class=\"line\">  ● 父元素设置 overflow：hidden; 在IE6中还需要触发 hasLayout，例如zoom：1;</span><br><span class=\"line\">  ● 父元素也设置浮动</span><br><span class=\"line\">  ● 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout</span><br><span class=\"line\">  ● 清除浮动最佳实践（after伪元素闭合浮动）：</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:after&#123;</span><br><span class=\"line\">    content: &quot;\\200B&quot;;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .clearfix&#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"31-javascript的本地对象，内置对象和宿主对象\"><a href=\"#31-javascript的本地对象，内置对象和宿主对象\" class=\"headerlink\" title=\"31.javascript的本地对象，内置对象和宿主对象\"></a>31.javascript的本地对象，内置对象和宿主对象</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地对象为独立于宿主环境的ECMAScript提供的对象，包括Array Object RegExp等可以new实例化的对象</span><br><span class=\"line\">内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)</span><br><span class=\"line\">宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象</span><br><span class=\"line\"></span><br><span class=\"line\">  ● 数据封装类对象：Object、Array、Boolean、Number、String</span><br><span class=\"line\">  ● 其他对象：Function、Arguments、Math、Date、RegExp、Error</span><br><span class=\"line\">  ● ES6新增对象：Symbol、Map、Set、Promises、Proxy、Reflect</span><br></pre></td></tr></table></figure>\n<h6 id=\"32webSocket\"><a href=\"#32webSocket\" class=\"headerlink\" title=\"32webSocket:\"></a>32webSocket:</h6><p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)<br>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。<br>只有在支持web socket协议的服务器上才能正常工作。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"面试题总结\"><a href=\"#面试题总结\" class=\"headerlink\" title=\"面试题总结\"></a>面试题总结</h3><hr>\n<h6 id=\"1-http-网站请求得整个过程\"><a href=\"#1-http-网站请求得整个过程\" class=\"headerlink\" title=\"1.http 网站请求得整个过程\"></a>1.http 网站请求得整个过程</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.域名解析</span><br></pre></td></tr></table></figure>\n<p>就是将网站名称转变成IP地址：localhost–&gt;127.0.0.1，像什么hosts文件，DNS域名解析等等可以实现这种功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 发起TCP的3次握手</span><br></pre></td></tr></table></figure>\n<p>在客户机和服务器之间建立正常的TCP网络连接时：<br>        客户机首先发出一个SYN消息，<br>        服务器使用SYN+ACK应答表示接收到了这个消息，<br>        最后客户机再以ACK消息响应。<br>    这样在客户机和服务器之间才能建立起</p>","more":"<p>可靠的TCP连接，数据才可以在客户机和服务器之间传递。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. 建立TCP连接后发起http请求</span><br></pre></td></tr></table></figure></p>\n<p>发起HTTP请求(HTTP Request)<br>所谓的HTTP请求，也就是Web客户端向Web服务器发送信息，这个信息由如下三部分组成：<br>请求头，请求行，请求方式(只在POST请求中存在，因为GET请求并不包含任何实体)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4. 服务器端响应http请求</span><br></pre></td></tr></table></figure>\n<p>浏览器得到html代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5. 浏览器解析html代码，</span><br></pre></td></tr></table></figure>\n<p>并请求html代码中的资源<br>了解持久连接<br>有时候我们获取一个HTML页面，在对浏览器对HTML解析的过程中，如果发现额外的URL需要获取的内容，会再次发起HTTP请求去服务器获取，比如样式文件，图片。许多个HTTP请求，只依靠一个TCP连接就够了，这就是所谓的持久连接。也是所谓的一次HTTP请求完成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">。</span><br><span class=\"line\">6. 浏览器对页面进行渲染呈现给用户</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-webpack-glup-得去别，AMD、CMD得区别\"><a href=\"#2-webpack-glup-得去别，AMD、CMD得区别\" class=\"headerlink\" title=\"2.webpack glup 得去别，AMD、CMD得区别\"></a>2.webpack glup 得去别，AMD、CMD得区别</h6><p>sea.js遵循CMD规范.书写方式类似node.js的书写模板代码.依赖的自动加载,配置的简洁清晰.说白了就是懒加载.</p>\n<p>require.js遵循AMD规范,CMD和AMD基本相同,最大的区别是就CMD是懒加载,AMD是预加载.</p>\n<p>简单来说,就是sea.js属于懒加载,require.js属于预加载.</p>\n<p>在这里,顺便扩展一下预加载和懒加载的优缺点</p>\n<p>预加载:当第一次访问时将所有的文件加载出来<br>优点:第一次访问完成以后, 再次访问的速度会很快<br>缺点:第一次加载页面要等待很久.</p>\n<p>懒加载:使用的时候才会加载对应的文件.<br>优点:第一次访问速度相对快点<br>缺点:再访问其他新的模块时速度会变慢.</p>\n<p>gulp是一个基于流的构建工具，相对其他构件工具来说，更简洁更高效。<br>webpack是模块化管理的工具，使用webpack可实现模块按需加载，模块预处理，模块打包等功能<br><a href=\"https://www.jianshu.com/p/9724c47b406c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9724c47b406c</a></p>\n<p>webpack 模块化打包原理：<br><a href=\"http://blog.csdn.net/u014168594/article/details/77198729）\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u014168594/article/details/77198729）</a></p>\n<ol>\n<li>一切皆模块：<br>正如js文件可以是一个“模块（module）”一样，其他的（如css、image或html）文件也可视作模 块。因此，你可以require(‘myJSfile.js’)亦可以require(‘myCSSfile.css’)。这意味着我们可以将事物（业务）分割成更小的易于管理的片段，从而达到重复利用等的目的。</li>\n<li>按需加载：<br>传统的模块打包工具（module bundlers）最终将所有的模块编译生成一个庞大的bundle.js文件。但是在真实的app里边，“bundle.js”文件可能有10M到15M之大可能会导致应用一直处于加载中状态。因此Webpack使用许多特性来分割代码然后生成多个“bundle”文件，而且异步加载部分代码以实现按需加载。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.require.js  得使用</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html?bsh_bid=230697246\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2012/11/require_js.html?bsh_bid=230697246</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.简单介绍一下webpack，及loader中得作用。</span><br></pre></td></tr></table></figure>\n<p>  ● css-loader 处理css中路径引用等问题<br>  ● style-loader 动态把样式写入css<br>  ● sass-loader scss编译器<br>  ● less-loader less编译器<br>  ● postcss-loader scss再处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">5.webpack 简单配置描述：</span><br></pre></td></tr></table></figure>\n<p> <a href=\"https://www.cnblogs.com/pingfan1990/archive/2017/05/21/6886633.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pingfan1990/archive/2017/05/21/6886633.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.当webpack得打包文件过大时怎么进行优化</span><br></pre></td></tr></table></figure>\n<p>(1)webpack+react的项目打包出来的文件经常动则几百kb甚至上兆，究其原因有：<br>  ● import css文件的时候，会直接作为模块一并打包到js文件中<br>  ● 所有js模块 + 依赖都会打包到一个文件<br>  ● React、ReactDOM文件过大</p>\n<p>针对第一种情况，我们可以使用</p>\n<p>extract-text-webpack-plugin，但缺点是会产生更长时间的编译，也没有HMR，还会增加额外的HTTP请求。对于css文件不是很大的情况最好还是不要使用该插件。<br>针对第二种情况，我们可以通过提取公共代码块，这也是比较普遍的做法：</p>\n<p>(2).代码压缩 webpack提供的UglifyJS插件由于采用单线程压缩</p>\n<p>(3).happypack同时还利用缓存来使得rebuild 更快</p>\n<p>(4).alias和noPase resolve.alias是webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径<br><a href=\"https://github.com/hawx1993/tech-blog/issues/3\" target=\"_blank\" rel=\"noopener\">https://github.com/hawx1993/tech-blog/issues/3</a></p>\n<h6 id=\"3-开发过程中遇到得兼容性问题，css-js-兼容\"><a href=\"#3-开发过程中遇到得兼容性问题，css-js-兼容\" class=\"headerlink\" title=\"3.开发过程中遇到得兼容性问题，css . js 兼容\"></a>3.开发过程中遇到得兼容性问题，css . js 兼容</h6><p>html兼容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.IE</span><br></pre></td></tr></table></figure>\n<p> 条件注释—IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.html</span><br></pre></td></tr></table></figure>\n<p> 新标签IE不支持–IE8/IE7/IE6支持通过document.createElement方法产生的标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.css:兼容</span><br></pre></td></tr></table></figure>\n<p>Ie z-index问题 给父级添加position:relative<br>css hack原理及常用hack<br>  ● 原理：利用不同浏览器对CSS的支持和解析结果不一样编写针对特定浏览器样式。</p>\n<p>  ● 常见的hack有</p>\n<pre><code> ○ 属性hack\n○ 选择器hack\n○ IE条件注释\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.js兼容</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.IE和标准下有哪些兼容性的写法</p>\n<p>Var ev = ev || window.event</p>\n<p>document.documentElement.clientWidth || document.body.clientWidth</p>\n<p>Var target = ev.srcElement||ev.target</p>\n<p>2.标准的事件绑定方法函数为addEventListener，但IE下是attachEvent；<br>3.事件的捕获方式不一致，标准浏览器是由外至内，而IE是由内到外，但是最后的结果是将IE的标准定为标准</p>\n<p>4.window.event获取的。并且获取目标元素的方法也不同，标准浏览器是event.target，而IE下是event.srcElement</p>\n</blockquote>\n<h6 id=\"4-原型链，原型\"><a href=\"#4-原型链，原型\" class=\"headerlink\" title=\"4.原型链，原型\"></a>4.原型链，原型</h6><p>  ● 原型：</p>\n<blockquote>\n<ol>\n<li>JavaScript的所有对象中都包含了一个 [proto] 内部属性，这个属性所对应的就是该对象的原型</li>\n</ol>\n<p>2.JavaScript的函数对象，除了原型 [proto] 之外，还预置了 prototype 属性</p>\n<ol start=\"3\">\n<li>当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型 [proto]。</li>\n</ol>\n</blockquote>\n<p>  ● 原型链：</p>\n<blockquote>\n<ol>\n<li>当一个对象调用的属性/方法自身不存在时，就会去自己 [proto] 关联的前辈 prototype 对象上去找</li>\n</ol>\n<p>2.如果没找到，就会去该 prototype 原型 [proto] 关联的前辈 prototype 去找。依次类推，直到找到属性/方法或 undefined 为止。从而形成了所谓的“原型链”</p>\n</blockquote>\n<p>  ● 原型特点：</p>\n<blockquote>\n<p>JavaScript对象是通过引用来传递的，当修改原型时，与之相关的对象也会继承这一改变</p>\n</blockquote>\n<h6 id=\"5-rem-得计算方式。\"><a href=\"#5-rem-得计算方式。\" class=\"headerlink\" title=\"5.rem 得计算方式。\"></a>5.rem 得计算方式。</h6><blockquote>\n<p>设计图750px,iphone 6 得屏幕宽度为375px,  之前设计图为640px</p>\n<p>  ● 假设拿到的设计稿和上述网易的一样都是750，Flexible会把设计稿分为10份，可以理解为页面width=10rem，即1rem=75px，所以根font-size（基准值）=75px。</p>\n<p>之后的css换算rem公式为：</p>\n<p>px/75=rem,所以100px=100/75=1.33rem,50px=50/75=0.66rem<br>9.闭包怎么理解，及使用场景。</p>\n</blockquote>\n<h6 id=\"6-简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\"><a href=\"#6-简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\" class=\"headerlink\" title=\"6.简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域\"></a>6.简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域</h6><blockquote>\n<p>使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值</p>\n<p>  ● 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</p>\n</blockquote>\n<blockquote>\n<p>  ● 闭包的特性：</p>\n</blockquote>\n<blockquote>\n<p>   函数内再嵌套函数\\<br>   内部函数可以引用外层的参数和变量\\<br>    参数和变量不会被垃圾回收机制回收</p>\n</blockquote>\n<h6 id=\"7-css-选择器及权重问题\"><a href=\"#7-css-选择器及权重问题\" class=\"headerlink\" title=\"7.css 选择器及权重问题\"></a>7.css 选择器及权重问题</h6><blockquote>\n<p>  ● id选择器（ # myid）\\<br>  ● 类选择器（.myclassname）\\<br>  ● 标签选择器（div, h1, p）\\<br>  ● 相邻选择器（h1 + p）\\<br>  ● 子选择器（ul &gt; li）\\<br>  ● 后代选择器（li a）\\<br>  ● 通配符选择器（ * ）\\<br>  ● 属性选择器（a[rel = “external”]）\\<br>  ● 伪类选择器（a:hover, li:nth-child）\\<br>  ● 可继承的样式： font-size font-family color, UL LI DL DD DT\\<br>  ● 不可继承的样式：border padding margin width height\\<br>CSS优先级算法如何计算？<br>  ● 优先级就近原则，同权重情况下样式定义最近者为准\\<br>  ● 载入样式以最后载入的定位为准\\<br>  ● 优先级为: !important &gt; id &gt; class &gt; tag \\<br>important 比内联优先级高</p>\n</blockquote>\n<h6 id=\"8-同源策略\"><a href=\"#8-同源策略\" class=\"headerlink\" title=\"8.同源策略\"></a>8.同源策略</h6><blockquote>\n<p>请解释一下 JavaScript 的同源策略\\<br>  ● 概念:同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape\\ Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议\\<br>  ● 指一段脚本只能读取来自同一来源的窗口和文档的属性\\<br>为什么要有同源限制？\\<br>  ● 我们举例说明：比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手了。\\<br>  ● 缺点\\<br>      现在网站的JS都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节</p>\n</blockquote>\n<h6 id=\"9-跨域的几种方式，jsonp的实现原理\"><a href=\"#9-跨域的几种方式，jsonp的实现原理\" class=\"headerlink\" title=\"9.跨域的几种方式，jsonp的实现原理\"></a>9.跨域的几种方式，jsonp的实现原理</h6><p>1、 通过jsonp跨域\\<br>2、 document.domain + iframe跨域\\<br>3、 location.hash + iframe<br>4、 window.name + iframe跨域\\<br>5、 postMessage跨域\\<br>6、 跨域资源共享（CORS）\\<br>7、 nginx代理跨域\\<br>8、 nodejs中间件代理跨域\\<br>9、 WebSocket协议跨域\\</p>\n<p>jsonp:\\<br>Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术</p>\n<p>document.domain\\<br>目前，很多大型网站都会使用多个子域名，而浏览器的同源策略对于它们来说就有点过于严格了。如，来自<a href=\"http://www.a.com想要获取document.a.com中的数据。只要基础域名相同，便可以通过修改document.domain为基础域名的方式来进行通信，但是需要注意的是协议和端口也必须相同。\" target=\"_blank\" rel=\"noopener\">www.a.com想要获取document.a.com中的数据。只要基础域名相同，便可以通过修改document.domain为基础域名的方式来进行通信，但是需要注意的是协议和端口也必须相同。</a></p>\n<p>所谓反向代理服务器，它是代理服务器中的一种。客户端直接发送请求给代理服务器，然后代理服务器会根据客户端的请求，从真实的资源服务器中获取资源返回给客户端。所以反向代理就隐藏了真实的服务器。利用这种特性，我们可以通过将其他域名的资源映射成自己的域名来规避开跨域问题</p>\n<p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p>\n<h6 id=\"10-webpack反向代理实现方式\"><a href=\"#10-webpack反向代理实现方式\" class=\"headerlink\" title=\"10.webpack反向代理实现方式\"></a>10.webpack反向代理实现方式</h6><p>webpack-dev-server配置跨域方案\\<br>如果你项目是用webpack作为前端自动化构建工具的话，那么可以引用webpack-dev-server来进行配置跨域方案。webpack-dev-server是一个小型的nodejs服务器，是基于express框架的，用于实时监听和打包编译静态资源。其中里面有一个属性是proxy，是专门来配置代理请求接口的。</p>\n<h6 id=\"11-mongoDB特性及应用场景，与mysql得不同点\"><a href=\"#11-mongoDB特性及应用场景，与mysql得不同点\" class=\"headerlink\" title=\"11. mongoDB特性及应用场景，与mysql得不同点\"></a>11. mongoDB特性及应用场景，与mysql得不同点</h6><p><a href=\"https://yq.aliyun.com/articles/64352?spm=5176.8091938.0.0.oAHbxp\\\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/64352?spm=5176.8091938.0.0.oAHbxp\\</a><br>开源的NoSQL数据库,用于存储非结构化数据,<br>    SQL中的绝大多数操作有对应的方式来实现,<br>    采用BSON描述数据类型</p>\n<p>用在应用服务器的日志记录，查找起来比文本灵活，导出也很方便。也是给应用练手，从外围系统开始使用MongoDB。 用在一些第三方信息的获取或者抓取，因为MongoDB的schema-less，所有格式灵活，不用为了各种格式不一样的信息专门设计统一的格式，极大的减少开发的工作。<br>mongodb之前有用过，主要用来存储一些监控数据，No schema 对开发人员来说，真的很方便，增加字段不用改表结构，而且学习成本极低。</p>\n<h6 id=\"12-es6新增特性\"><a href=\"#12-es6新增特性\" class=\"headerlink\" title=\"12.es6新增特性\"></a>12.es6新增特性</h6><p>现在如果你还不知道es6的新特性的话，可能真的就很难找到工作了</p>\n<h6 id=\"13-promise的用法\"><a href=\"#13-promise的用法\" class=\"headerlink\" title=\"13.promise的用法\"></a>13.promise的用法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(&apos;/posts.json&apos;).then(function(posts) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;).catch(function(error) &#123;</span><br><span class=\"line\">  // 处理 getJSON 和 前一个回调函数运行时发生的错误</span><br><span class=\"line\">  console.log(&apos;发生错误！&apos;, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Promise.prototype.finally()\\<br>finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>\n<p>Promise.all() \\<br>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<h6 id=\"14-使用实现promise\"><a href=\"#14-使用实现promise\" class=\"headerlink\" title=\"14.使用实现promise\"></a>14.使用实现promise</h6><p>同时发送多个请求，并且多个请求发送成功之后才算成功，怎么实现？\\</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### (promise.all = [])</span><br><span class=\"line\">const p = Promise.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>p的状态由p1、p2、p3决定，分成两种情况。\\</p>\n<p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\\</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n<h6 id=\"15-vue-视图组件的使用，父组件与子组件数据的传递方式\"><a href=\"#15-vue-视图组件的使用，父组件与子组件数据的传递方式\" class=\"headerlink\" title=\"15.vue 视图组件的使用，父组件与子组件数据的传递方式\"></a>15.vue 视图组件的使用，父组件与子组件数据的传递方式</h6><p>父组件数据如何传递给子组件呢？可以通过props属性来实现<br>子组件通过props来接收数据:</p>\n<p>因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，从而达到改变子组件数据的目的.\\</p>\n<p>子组件使用.$emit 向上广播事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$emit(&apos;upup&apos;,&apos;hehe&apos;);</span><br><span class=\"line\"># 主动触发upup方法，&apos;hehe&apos;为向父组件传递的数据</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child @upup=&quot;change&quot; :msg=&quot;msg&quot;&gt;&lt;/child&gt;</span><br><span class=\"line\"># 监听子组件触发的upup事件,然后调用change方法</span><br></pre></td></tr></table></figure>\n<h6 id=\"16-vuex-的的使用\"><a href=\"#16-vuex-的的使用\" class=\"headerlink\" title=\"16.vuex 的的使用\"></a>16.vuex 的的使用</h6><p>答：vue框架中状态管理。在main.js引入store，注入。\\<br>新建了一个目录store，….. export 。<br>场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p>\n<h6 id=\"17-vuex有哪几种属性？\"><a href=\"#17-vuex有哪几种属性？\" class=\"headerlink\" title=\"17.vuex有哪几种属性？\"></a>17.vuex有哪几种属性？</h6><p>答：有五种，分别是 State、 Getter、Mutation 、Action、 Module</p>\n<h6 id=\"18-vuex的State特性是？\"><a href=\"#18-vuex的State特性是？\" class=\"headerlink\" title=\"18.vuex的State特性是？\"></a>18.vuex的State特性是？</h6><p>答：\\<br>一、Vuex就是一个仓库，仓库里面放了很多对象。其中state就是数据源存放     地，对应于与一般Vue对象里面的data\\<br>二、state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新\\<br>三、它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中</p>\n<h6 id=\"19-vuex的Getter特性是？\"><a href=\"#19-vuex的Getter特性是？\" class=\"headerlink\" title=\"19.vuex的Getter特性是？\"></a>19.vuex的Getter特性是？</h6><p>答：<br>一、getters 可以对State进行计算操作，它就是Store的计算属性\\<br>二、 虽然在组件内也可以做计算属性，但是getters 可以在多组件之间复用\\<br>三、 如果一个状态只在一个组件内使用，是可以不用getters</p>\n<h6 id=\"20、vuex的Mutation特性是？\"><a href=\"#20、vuex的Mutation特性是？\" class=\"headerlink\" title=\"20、vuex的Mutation特性是？\"></a>20、vuex的Mutation特性是？</h6><p>答：<br>一、Action 类似于 mutation，不同在于：<br>二、Action 提交的是 mutation，而不是直接变更状态。<br>三、Action 可以包含任意异步操作</p>\n<h6 id=\"21-Vue-js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\"><a href=\"#21-Vue-js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\" class=\"headerlink\" title=\"21.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？\"></a>21.Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？</h6><p>答：<br>一、如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里.</p>\n<p>二、如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用，并包装成promise返回，在调用处用async await处理返回的数据。如果不要复用这个请求，那么直接写在vue文件里很方便。</p>\n<h6 id=\"22-不用Vuex会带来什么问题？\"><a href=\"#22-不用Vuex会带来什么问题？\" class=\"headerlink\" title=\"22.不用Vuex会带来什么问题？\"></a>22.不用Vuex会带来什么问题？</h6><p>答：\\<br>一、可维护性会下降，你要想修改数据，你得维护三个地方\\</p>\n<p>二、可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的\\</p>\n<p>三、增加耦合，大量的上传派发，会让耦合性大大的增加，本来Vue用Component就是为了减少耦合，现在这么用，和组件化的初衷相背。</p>\n<h6 id=\"23-对模块化的理解\"><a href=\"#23-对模块化的理解\" class=\"headerlink\" title=\"23.对模块化的理解\"></a>23.对模块化的理解</h6><p>理解模块化开发模式：浏览器端requirejs，seajs；服务器端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案；grunt、gulp等前端工作流的使用</p>\n<p>主要考察你是否有做过比较复杂、庞大的项目，是否具备一定的编程思想。随着前端技术的发展,前端编写的代码量也越来越大，就需要对代码有很好的管理。目前比较好的开发语言就是OOP（面向对象编程）编程语言，例如java语言、C#语言。从JavaScript新的版本来看，要求JavaScript具有封装、继承、多态这样的优点需求越来越明显。这道题属于编程思想上范畴。</p>\n<h6 id=\"24-什么是模块化\"><a href=\"#24-什么是模块化\" class=\"headerlink\" title=\"24.什么是模块化\"></a>24.什么是模块化</h6><p>所谓的模块化开发就是封装细节，提供使用接口，彼此之间互不影响，每个模块都是实现某一特定的功能。模块化开发的基础就是函数</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24355610\\\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24355610\\</a></p>\n<h6 id=\"25-页面有哪几种布局方式及实现方法\"><a href=\"#25-页面有哪几种布局方式及实现方法\" class=\"headerlink\" title=\"25.页面有哪几种布局方式及实现方法\"></a>25.页面有哪几种布局方式及实现方法</h6><p><a href=\"https://www.cnblogs.com/yanayana/p/7066948.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yanayana/p/7066948.html</a></p>\n<h6 id=\"26-position的几个属性，及定位的方式\"><a href=\"#26-position的几个属性，及定位的方式\" class=\"headerlink\" title=\"26.position的几个属性，及定位的方式\"></a>26.position的几个属性，及定位的方式</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● absolute</span><br><span class=\"line\">      ○ 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。</span><br><span class=\"line\">  ● fixed （老IE不支持）</span><br><span class=\"line\">      ○ 生成绝对定位的元素，相对于浏览器窗口进行定位。</span><br><span class=\"line\">  ● relative</span><br><span class=\"line\">      ○ 生成相对定位的元素，相对于其正常位置进行定位。</span><br><span class=\"line\">  ● static</span><br><span class=\"line\">      ○ 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right - z-index 声明）。</span><br><span class=\"line\">  ● inherit</span><br><span class=\"line\">      ○ 规定从父元素继承 position 属性的值</span><br></pre></td></tr></table></figure>\n<h6 id=\"27-浏览器加载页面的整个过程简述-描述浏览器的渲染过程，DOM树和渲染树的区别？\"><a href=\"#27-浏览器加载页面的整个过程简述-描述浏览器的渲染过程，DOM树和渲染树的区别？\" class=\"headerlink\" title=\"27.浏览器加载页面的整个过程简述, 描述浏览器的渲染过程，DOM树和渲染树的区别？\"></a>27.浏览器加载页面的整个过程简述, 描述浏览器的渲染过程，DOM树和渲染树的区别？</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● 浏览器的渲染过程：</span><br><span class=\"line\">      ○ 解析HTML构建 DOM(DOM树)，并行请求 css/image/js</span><br><span class=\"line\">      ○ CSS 文件下载完成，开始构建 CSSOM(CSS树)</span><br><span class=\"line\">      ○ CSSOM 构建结束后，和 DOM 一起生成 Render Tree(渲染树)</span><br><span class=\"line\">      ○ 布局(Layout)：计算出每个节点在屏幕中的位置</span><br><span class=\"line\">      ○ 显示(Painting)：通过显卡把页面画到屏幕上</span><br><span class=\"line\">  ● DOM树 和 渲染树 的区别：</span><br><span class=\"line\">      ○ DOM树与HTML标签一一对应，包括head和隐藏元素</span><br><span class=\"line\">      ○ 渲染树不包括head和隐藏元素，大段文本的每一个行都是独立节点，每一个节点都有对应的css属性</span><br></pre></td></tr></table></figure>\n<h6 id=\"28-ajax的实现\"><a href=\"#28-ajax的实现\" class=\"headerlink\" title=\"28.ajax的实现\"></a>28.ajax的实现</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">● ● 异步传输 + js + xml,</span><br><span class=\"line\"> ● 所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验</span><br><span class=\"line\"> ● 创建XMLHttpRequest对象,也就是创建一个异步调用对象</span><br><span class=\"line\"> ● 建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</span><br><span class=\"line\"> ● 设置响应HTTP请求状态变化的函数</span><br><span class=\"line\"> ● 发送HTTP请求</span><br><span class=\"line\"> ● 获取异步调用返回的数据</span><br><span class=\"line\"> ● 用JavaScript和DOM实现局部刷新</span><br></pre></td></tr></table></figure>\n<h6 id=\"29-函数中this的指向，类中this的指向\"><a href=\"#29-函数中this的指向，类中this的指向\" class=\"headerlink\" title=\"29.函数中this的指向，类中this的指向\"></a>29.函数中this的指向，类中this的指向</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this 总是指向函数的直接调用者</span><br><span class=\"line\"></span><br><span class=\"line\">如果有 new 关键字，this 指向 new 出来的实例对象</span><br><span class=\"line\"></span><br><span class=\"line\">在事件中，this指向触发这个事件的对象</span><br><span class=\"line\"></span><br><span class=\"line\">IE下 attachEvent 中的this总是指向全局对象Window</span><br></pre></td></tr></table></figure>\n<h6 id=\"30-介绍一下浏览器对标签的加载方式\"><a href=\"#30-介绍一下浏览器对标签的加载方式\" class=\"headerlink\" title=\"30.介绍一下浏览器对标签的加载方式\"></a>30.介绍一下浏览器对标签的加载方式</h6><h6 id=\"31-介绍事件冒泡\"><a href=\"#31-介绍事件冒泡\" class=\"headerlink\" title=\"31.介绍事件冒泡\"></a>31.介绍事件冒泡</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件的三个阶段</span><br><span class=\"line\">  ● 捕获、目标、冒泡</span><br><span class=\"line\">  ● 按照W3C标准的事件：首是进入捕获阶段，直到达到目标元素，再进入冒泡阶段</span><br><span class=\"line\">  ● 事件执行次数（DOM2-addEventListener）：元素上绑定事件的个数</span><br><span class=\"line\">      ○ 注意1：前提是事件被确实触发</span><br><span class=\"line\">      ○ 注意2：事件绑定几次就算几个事件，即使类型和功能完全一样也不会“覆盖”</span><br><span class=\"line\">  ● 事件执行顺序：判断的关键是否目标元素</span><br><span class=\"line\">      ○ 非目标元素：根据W3C的标准执行：捕获-&gt;目标元素-&gt;冒泡（不依据事件绑定顺序）</span><br><span class=\"line\">      ○ 目标元素：依据事件绑定顺序：先绑定的事件先执行（不依据捕获冒泡标准）</span><br><span class=\"line\">      ○ 最终顺序：父元素捕获-&gt;目标元素事件1-&gt;目标元素事件2-&gt;子元素捕获-&gt;子元素冒泡-&gt;父元素冒泡</span><br><span class=\"line\">      ○ 注意：子元素事件执行前提 事件确实“落”到子元素布局区域上，而不是简单的具有嵌套关系</span><br><span class=\"line\">  ● 阻止事件默认行为</span><br><span class=\"line\">      ○ W3C: e.preventDefault()</span><br><span class=\"line\">      ○ IE: window.event.returnValue = false</span><br><span class=\"line\">  ● 阻止事件传播</span><br><span class=\"line\">      ○ W3C: e.stopPropagation()</span><br><span class=\"line\">      ○ IE: window.event.cancelBubble = true</span><br></pre></td></tr></table></figure>\n<h6 id=\"29-new操作符具体干了什么呢\"><a href=\"#29-new操作符具体干了什么呢\" class=\"headerlink\" title=\"29.new操作符具体干了什么呢?\"></a>29.new操作符具体干了什么呢?</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</span><br><span class=\"line\">2、属性和方法被加入到 this 引用的对象中。</span><br><span class=\"line\">3、新创建的对象由 this 所引用，并且最后隐式的返回 this</span><br></pre></td></tr></table></figure>\n<h6 id=\"30-浮动会对页面产生什么影响，怎么清除浮动\"><a href=\"#30-浮动会对页面产生什么影响，怎么清除浮动\" class=\"headerlink\" title=\"30.浮动会对页面产生什么影响，怎么清除浮动\"></a>30.浮动会对页面产生什么影响，怎么清除浮动</h6><p>  ● 浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列举几种清除浮动的方式？</span><br><span class=\"line\">  ● 添加额外标签，例如 &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  ● 使用 br 标签和其自身的 clear 属性，例如 &lt;br clear=&quot;all&quot; /&gt;</span><br><span class=\"line\">  ● 父元素设置 overflow：hidden; 在IE6中还需要触发 hasLayout，例如zoom：1;</span><br><span class=\"line\">  ● 父元素也设置浮动</span><br><span class=\"line\">  ● 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout</span><br><span class=\"line\">  ● 清除浮动最佳实践（after伪元素闭合浮动）：</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:after&#123;</span><br><span class=\"line\">    content: &quot;\\200B&quot;;</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">    height: 0;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .clearfix&#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"31-javascript的本地对象，内置对象和宿主对象\"><a href=\"#31-javascript的本地对象，内置对象和宿主对象\" class=\"headerlink\" title=\"31.javascript的本地对象，内置对象和宿主对象\"></a>31.javascript的本地对象，内置对象和宿主对象</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地对象为独立于宿主环境的ECMAScript提供的对象，包括Array Object RegExp等可以new实例化的对象</span><br><span class=\"line\">内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)</span><br><span class=\"line\">宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象</span><br><span class=\"line\"></span><br><span class=\"line\">  ● 数据封装类对象：Object、Array、Boolean、Number、String</span><br><span class=\"line\">  ● 其他对象：Function、Arguments、Math、Date、RegExp、Error</span><br><span class=\"line\">  ● ES6新增对象：Symbol、Map、Set、Promises、Proxy、Reflect</span><br></pre></td></tr></table></figure>\n<h6 id=\"32webSocket\"><a href=\"#32webSocket\" class=\"headerlink\" title=\"32webSocket:\"></a>32webSocket:</h6><p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)<br>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。<br>只有在支持web socket协议的服务器上才能正常工作。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgxveye7000018tnmaq9rie9","tag_id":"cjgxveygi000318tn3qjpkj69","_id":"cjgxveyhw000618tna6anxtd2"},{"post_id":"cjgxveyg0000218tnddly6t8i","tag_id":"cjgxveyhu000518tnpx0xkqis","_id":"cjgxveyhz000818tny6ab0yhn"},{"post_id":"cjgxveygo000418tncbvqtx2p","tag_id":"cjgxveyhy000718tnu6uf3lzc","_id":"cjgxveyi5000918tnpobullz9"}],"Tag":[{"name":"linux","_id":"cjgxveygi000318tn3qjpkj69"},{"name":"时间线","_id":"cjgxveyhu000518tnpx0xkqis"},{"name":"javaScript","_id":"cjgxveyhy000718tnu6uf3lzc"}]}}